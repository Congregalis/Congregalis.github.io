<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Flutter初识——创建第一个跨平台APP</title>
    <link href="/2021/04/24/Flutter%E5%88%9D%E8%AF%86%E2%80%94%E2%80%94%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%B7%A8%E5%B9%B3%E5%8F%B0APP/"/>
    <url>/2021/04/24/Flutter%E5%88%9D%E8%AF%86%E2%80%94%E2%80%94%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%B7%A8%E5%B9%B3%E5%8F%B0APP/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近声网办了一个编程挑战赛，用他们的 SDK 来开发应用。我也是对此比较感兴趣就想了解了解，同时做个作品。但是我对于前端的东西 js 一类的比较反感哈哈，不太想去学，于是就看看移动端上有没有什么易于开发的东西。之前也是读过《第一行代码》，学过安卓，但是安卓的更新迭代太快了，以前的安卓项目现在都没法运行起来了，故也不太想捣鼓安卓。</p><p>这个时候我看到了 Flutter ，对此颇感兴趣，浏览了一下官方文档以及一些 flutter 的社区，感觉生态环境都还不错，所以准备入坑！那么在这里也是记录一下我的一个入坑过程。</p><p>简单介绍一下，Flutter 就是一个<strong>跨平台开发</strong>的框架，可以帮助我们通过一套代码库高效地构建多平台精美应用，包括 Android、IOS、Web、桌面应用等。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>如果要跨平台开发，那么Mac肯定是首选工具，否则你就只能开发安卓应用了。</p><p>如果你要开发安卓应用，那么你需要</p><ul><li>Flutter SDK</li><li>Android SDK</li><li>Android Studio 或者 VSCode</li></ul><p>如果你要开发IOS应用，那么你需要</p><ul><li>Flutter SDK</li><li>Xcode</li></ul><p>这里我的 Flutter SDK 用的是<strong>1.22.6</strong>，因为声网官网上说了目前还不支持 Flutter 2.x。获取特定的SDK版本下载可以看<a href="https://flutter.cn/docs/development/tools/sdk/releases">这里</a></p><p>为了获得比较轻量级的编辑体验，我使用的是 VSCode，安装了<strong>Flutter</strong>和<strong>Dart</strong>两个插件</p><p>将以上环境都安装配置好之后（记得配置环境变量），就可以愉快的开始开发了。</p><blockquote><p>Hint: 测试可以在虚拟机或者自己的手机上进行，有什么问题运行 <code>flutter doctor</code> 都可以找到问题并解决</p></blockquote><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>开发第一个程序，“Hello World”那是必不可少的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"></span>)</span> &#123;<br>  runApp(<br>    Center(<br>      child: Text(<br>        <span class="hljs-string">&#x27;Hello World&#x27;</span>,<br>        textDirection: TextDirection.ltr,<br>      ),<br>    ),<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>非常的简单，主屏幕上就会展示“Hello World”了。</p><p>Flutter 使用的语言是 Dart ，如果你像我一样比较熟悉面向对象语言，那么相信你很容易就能上手。</p><h2 id="第一个App"><a href="#第一个App" class="headerlink" title="第一个App"></a>第一个App</h2><p>这里我用的是官方文档上“编写第一个Flutter应用”的例子，在那里它说的十分清楚，留一个<a href="https://flutter.cn/docs/get-started/codelab">传送门</a>。</p><p>跟着它的教程可以很容易的构建出第一个应用并且熟悉基础的 flutter app 编写，比如如何绘制UI，如何响应按钮按下的动作等等。</p><p><img src="/img/flutter1/firstappv1.png" alt="图来自flutter官方文档"></p><h2 id="加入白天-黑夜模式切换"><a href="#加入白天-黑夜模式切换" class="headerlink" title="加入白天/黑夜模式切换"></a>加入白天/黑夜模式切换</h2><p>为了更好的体验 flutter，在它的例子基础上我加入了切换白天/黑夜浏览模式这个功能。通过右上角的<strong>小灯泡</strong>可以实现模式的切换，并且在进入收藏列表后白天/黑夜主题也会保持一致。</p><center class="half">    <img src = "/img/flutter1/android-day.png" width = "400"/>    <img src = "/img/flutter1/android-night.png" width = "400"/></center><br><p>那么接下来就来看看这是怎么实现的</p><h3 id="加入小灯泡"><a href="#加入小灯泡" class="headerlink" title="加入小灯泡"></a>加入小灯泡</h3><p>这一步非常好做，在官方介绍的教程里也说了如何在 AppBar 上加入一个带图标的按钮，在此基础上再加一个就行啦。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">Scaffold</span>(<br>        <span class="hljs-attribute">appBar</span>: AppBar(<br>          <span class="hljs-attribute">title</span>: Text(<span class="hljs-string">&#x27;名字生成器&#x27;</span>),<br>          <span class="hljs-comment">// backgroundColor: barColor,</span><br>          <span class="hljs-attribute">actions</span>: &lt;Widget&gt;[<br>            new IconButton(<br>                <span class="hljs-attribute">icon</span>: const Icon(Icons.lightbulb_outlined),<br>                <span class="hljs-attribute">onPressed</span>: _switchDarkMode),<br>            new IconButton(<span class="hljs-attribute">icon</span>: const Icon(Icons.list), <span class="hljs-attribute">onPressed</span>: _pushSaved),<br>          ],<br>        ),<br>        <span class="hljs-attribute">body</span>: _buildSuggestions(),<br>      );<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h3><p>加这个功能的想法其实就是从官方教程上说到主题那里来的。我在反复的测试都有些什么主题的时候发现了有<code>ThemeData.dark()</code>和<code>ThemeData.light()</code>两个有意思的东西，我就在想何不做一个主题切换呢？但是在真正做的时候其实还是困扰了我很久的，毕竟我比较菜。</p><p>于是我就上网查了一下，发现通过调用<strong>setState</strong>并重写里面的方法可以做到改变界面的一些状态。但是你会发现，<strong>theme</strong>是在<strong>MaterialApp</strong>下的，而如果你是按官方教程做的，它在重写 build 方法时只构建了 Scaffold ，而把 MaterialApp 的构建写在了 Myapp 里。这就导致如果你想通过 Scaffold 里的按钮改变主题，那必须得修改上层 MaterialApp 的 theme ，而他们又不在一个类中，不属于一个 Widget，<strong>这个时候调用 setState 无法改变到 theme</strong>。</p><p>我也是上网查到有很多种方案，但大都比较复杂，有的甚至需要导入一些外部包。本着简洁高效的我当然不接受这样做了，于是我想出了另一个方案，不知道适不适合，在这里供大家一看。</p><p>首先，既然 theme 只能在 MaterialApp 里指定，那我就在重写 build 方法的时候在外面再套一层 MaterialApp 不就可以了嘛。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// 在类里定义好themeData与当前模式两个变量</span><br>ThemeData themeData = <span class="hljs-keyword">new</span> ThemeData.dark();<br><span class="hljs-built_in">bool</span> isDark = <span class="hljs-keyword">true</span>;<br><br><span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> MaterialApp( <span class="hljs-comment">// 再加一层MaterialApp，在里面指定theme</span><br>      title: <span class="hljs-string">&#x27;名字生成器&#x27;</span>,<br>      theme: themeData,<br>      home: Scaffold(<br>        appBar: AppBar(<br>          title: Text(<span class="hljs-string">&#x27;名字生成器&#x27;</span>),<br>          <span class="hljs-comment">// backgroundColor: barColor,</span><br>          actions: &lt;Widget&gt;[<br>            <span class="hljs-keyword">new</span> IconButton(<br>                icon: <span class="hljs-keyword">const</span> Icon(Icons.lightbulb_outlined),<br>                onPressed: _switchDarkMode),<br>            <span class="hljs-keyword">new</span> IconButton(icon: <span class="hljs-keyword">const</span> Icon(Icons.list), onPressed: _pushSaved),<br>          ],<br>        ),<br>        body: _buildSuggestions(),<br>      ),<br>    );<br>  &#125;<br></code></pre></td></tr></table></figure><p>然后写这个<code>_switchDarkMode</code>就很轻松简单了。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> _switchDarkMode() &#123;<br>    setState(() &#123;<br>      <span class="hljs-keyword">if</span> (isDark) &#123;<br>        themeData = <span class="hljs-keyword">new</span> ThemeData.light();<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        themeData = <span class="hljs-keyword">new</span> ThemeData.dark();<br>      &#125;<br>      isDark = !isDark;<br>    &#125;);<br>  &#125;<br></code></pre></td></tr></table></figure><p>改完之后你会发现切换白天/黑夜模式可以了，非常开心。但是当你点进收藏列表，它又报错了。</p><h3 id="修改官方版本的路由代码"><a href="#修改官方版本的路由代码" class="headerlink" title="修改官方版本的路由代码"></a>修改官方版本的路由代码</h3><p>官方的路由这样的</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> _pushSaved() &#123;<br>  Navigator.of(context).push(<br>    <span class="hljs-keyword">new</span> MaterialPageRoute&lt;<span class="hljs-keyword">void</span>&gt;(<br>      ...                           <br>    )<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>报错也是提示出错是出在这里，那么这里为什么出错呢？这可能就需要去了解一些关于这里的 <strong>of(context)</strong> 的知识了。</p><p>我也是才入门了一天，没有去仔细的了解。查阅了网上资料通俗解释一下就是，当我们在 build 函数中使用 Navigator.of(context) 时，这个 context 其实是通过当前这个widget（在官方示例中就是 RandomWords 这个类）创建出来的 <strong>Element</strong> 对象，然后 of 方法会向上去寻找<strong>祖先结点</strong>。在官方实例中这么写是能找到祖先节点的，那就是在 MyApp 中创建的 MaterialApp ，所以官方示例中不会报错。</p><p>而在我们修改的版本里，在 RandomWords 的 build 函数中我又嵌套了一层 MaterialApp（为了实现主题切换功能），这时候在里面用 of 方法去寻找祖先节点可能寻找到这里就停止了，不再往上寻找了，于是就找不到上一层的路由了，所以在这里报了错。（这一段的原因我自己也没弄太明白，欢迎知道的大神指正我orz）</p><p>要修改其实很简单，当前就有一层 MaterialApp 了，因此没必要往上追溯，<strong>直接使用当前的 Navigator</strong> 即可。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> _pushSaved() &#123;<br>    Navigator.push(context,<br>        <span class="hljs-keyword">new</span> MaterialPageRoute(builder: (BuildContext context) &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-built_in">Iterable</span>&lt;ListTile&gt; tiles = _saved.map((WordPair pair) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ListTile(<br>          title: <span class="hljs-keyword">new</span> Text(<br>            pair.asPascalCase,<br>            style: _biggerFont,<br>          ),<br>        );<br>      &#125;);<br><br>      <span class="hljs-keyword">final</span> <span class="hljs-built_in">List</span>&lt;Widget&gt; divided = ListTile.divideTiles(<br>        context: context,<br>        tiles: tiles,<br>      ).toList();<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Scaffold(<br>          appBar: <span class="hljs-keyword">new</span> AppBar(<br>            leading: <span class="hljs-keyword">new</span> IconButton(<br>                icon: <span class="hljs-keyword">const</span> Icon(Icons.chevron_left),<br>                onPressed: () &#123;<br>                  Navigator.pop(context);<br>                &#125;),<br>            title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;我的收藏&#x27;</span>),<br>          ),<br>          body: <span class="hljs-keyword">new</span> ListView(children: divided),<br>      );<br>    &#125;));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="统一主题"><a href="#统一主题" class="headerlink" title="统一主题"></a>统一主题</h3><p>还有一点需要注意的就是官方示例中跳转到新页面时是直接返回的一个 Scaffold ，这样 Navigator 会自动创建一个“返回按钮”，但是我们想统一主题的话还是像我一开始所说的需要<strong>创建一个 MaterialApp</strong> ，所以这也需要自己手动添加“返回”按钮及功能了。</p><p>在上面 _pushSaved 方法中的 return 进行修改即可。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MaterialApp(<br>    theme: themeData,<br>    home: <span class="hljs-keyword">new</span> Scaffold(<br>        appBar: <span class="hljs-keyword">new</span> AppBar(<br>        leading: <span class="hljs-keyword">new</span> IconButton(<br>            icon: <span class="hljs-keyword">const</span> Icon(Icons.chevron_left),<br>            onPressed: () &#123;<br>                Navigator.pop(context);<br>            &#125;),<br>        title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;我的收藏&#x27;</span>),<br>        ),<br>        body: <span class="hljs-keyword">new</span> ListView(children: divided),<br>    ),<br>);<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说，Flutter 还是一个很好用的框架的，至少对我来说是如此。虽然 Dart 的嵌套一直被人诟病，但是 Dart 对于后端人员比较容易上手也算是他的一个优势吧，我个人认为他在快速开发一个应用上表现非常好。当然，这个系列后面的内容我肯定也是会围绕着那个声网的 SDK 去做的，毕竟这才是我的初衷哈哈。</p><p>最后再提供几个十分实用的资源:</p><ul><li><a href="https://api.flutter.dev/index.html">官方API</a></li><li><a href="https://flutter.cn/docs/cookbook">CookBook</a></li><li><a href="https://codelabs.flutter-io.cn/">CodeLabs</a></li><li><a href="https://gallery.flutter.dev/#/">Gallery</a></li><li><a href="https://fonts.google.com/icons?selected=Material+Icons">查看flutter提供的icons</a></li><li><a href="https://github.com/fengerwoo/easy_anim">更好的使用flutter动画的方式</a></li><li><a href="https://github.com/Solido/awesome-flutter">Awesome-Flutter</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Flutter</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>从递归到记忆化递归再到dp</title>
    <link href="/2021/04/21/%E4%BB%8E%E9%80%92%E5%BD%92%E5%88%B0%E8%AE%B0%E5%BF%86%E5%8C%96%E9%80%92%E5%BD%92%E5%86%8D%E5%88%B0dp/"/>
    <url>/2021/04/21/%E4%BB%8E%E9%80%92%E5%BD%92%E5%88%B0%E8%AE%B0%E5%BF%86%E5%8C%96%E9%80%92%E5%BD%92%E5%86%8D%E5%88%B0dp/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>今天做了一道题，觉得这个思想还挺有价值的，故写下这篇文记录一下。</p><p>题目是<a href="https://leetcode-cn.com/problems/decode-ways/">LC91</a>，是一道很基础的题。</p><p><img src="/img/20210421dp/question.jpg"></p><h2 id="解"><a href="#解" class="headerlink" title="解"></a>解</h2><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>看到这个题，一下能想到的方法就是递归搜索了。<br>因为这个题解码时只有两种情况，在某个状态截取1个字符或截取两个字符，所以递归做起来也不会很复杂。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">numDecodings</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-comment">// 递归解法（超时）</span><br>        <span class="hljs-keyword">return</span> dfs(s.toCharArray(), s.length(), <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] chars, <span class="hljs-keyword">int</span> len, <span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        <span class="hljs-comment">// 找到了一条解码方式</span><br>        <span class="hljs-keyword">if</span> (index &gt;= len) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <br>        <span class="hljs-comment">// &#x27;0&#x27;没有解码方式（10或20可以在下面截取2个字符时截取得到，所以不用担心这样漏解）</span><br>        <span class="hljs-keyword">if</span> (chars[index] == <span class="hljs-string">&#x27;0&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// 截取1个字符时</span><br>        <span class="hljs-keyword">int</span> res = dfs(chars, len, index + <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 截取2个字符时</span><br>        <span class="hljs-keyword">if</span> (index &lt; len - <span class="hljs-number">1</span> &amp;&amp; ((chars[index] - <span class="hljs-string">&#x27;0&#x27;</span>) * <span class="hljs-number">10</span> + (chars[index+<span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>) &lt;= <span class="hljs-number">26</span>))<br>            res += dfs(chars, len, index + <span class="hljs-number">2</span>);<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然，这个方法毫无疑问会超时，但是这无疑是我们往后优化所必不可少的第一步。</p><h3 id="记忆化递归"><a href="#记忆化递归" class="headerlink" title="记忆化递归"></a>记忆化递归</h3><p>抓耳挠腮了半天，甚至动笔模拟了很久，会发现这个递归的方法存在很多不必要的重复计算。<br>在计算一个字符串编码方式时，这个普通的递归方法会多次重复计算它的子编码方式（即它的子字符串的编码方式）</p><p>如果不懂的话，看一下代码比较容易理解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">numDecodings</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-comment">// 记忆化递归</span><br><br>        <span class="hljs-comment">// 使用一个数组来存储计算结果就行了</span><br>        <span class="hljs-comment">// 只需要存储s中从index开始到最后有多少种解码方式就行了</span><br>        <span class="hljs-keyword">int</span>[] record = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[s.length()];<br>        Arrays.fill(record, -<span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">return</span> dfs(s.toCharArray(), s.length(), <span class="hljs-number">0</span>, record);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] chars, <span class="hljs-keyword">int</span> len, <span class="hljs-keyword">int</span> index, <span class="hljs-keyword">int</span>[] record)</span> </span>&#123;<br>        <span class="hljs-comment">// 找到了一条解码方式</span><br>        <span class="hljs-keyword">if</span> (index &gt;= len) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <br>        <span class="hljs-comment">// &#x27;0&#x27;没有解码方式（10或20可以在下面截取2个字符时截取得到，所以不用担心这样漏解）</span><br>        <span class="hljs-keyword">if</span> (chars[index] == <span class="hljs-string">&#x27;0&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 如果已经计算过了，直接返回计算结果</span><br>        <span class="hljs-keyword">if</span> (record[index] != -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> record[index];<br><br>        <span class="hljs-comment">// 截取1个字符时</span><br>        <span class="hljs-keyword">int</span> res = dfs(chars, len, index + <span class="hljs-number">1</span>, record);<br>        <span class="hljs-comment">// 截取2个字符时</span><br>        <span class="hljs-keyword">if</span> (index &lt; len - <span class="hljs-number">1</span> &amp;&amp; ((chars[index] - <span class="hljs-string">&#x27;0&#x27;</span>) * <span class="hljs-number">10</span> + (chars[index+<span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>) &lt;= <span class="hljs-number">26</span>))<br>            res += dfs(chars, len, index + <span class="hljs-number">2</span>, record);<br>        <br>        record[index] = res; <span class="hljs-comment">// 记录下index下有多少种解码方式</span><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>到这里，其实已经优化的很好了，但是还可以使用动态规划解决。</p><h3 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h3><p>DP的方法其实就是把记忆化递归的方式写成迭代的方式。<br>在记忆化递归中，记录数组record是在s中从后往前记录的，当然DP也可以从后往前写，但是从前往后比较符合我们人类的思维，所以我这里从前往后使用迭代的方式来做。</p><p>如果是一步步做下来的，其实可以很轻松地发现状态转移方程。<br><code>dp[i] = dp[i-1] + dp[i-2]</code><br>只是在处理边界条件和判断进入哪种状态时需要稍微注意一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">numDecodings</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-comment">// dp解法</span><br>        <span class="hljs-comment">// 比s长度大1，是为了添加一个哨兵</span><br>        <span class="hljs-keyword">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[s.length() + <span class="hljs-number">1</span>];<br><br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>; <span class="hljs-comment">// 哨兵，防止第一个字符就是&#x27;0&#x27;</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= s.length(); i++) &#123;<br>            <span class="hljs-comment">// 截取一个字符时</span><br>            <span class="hljs-comment">// 只要不是&#x27;0&#x27;都可以接受</span><br>            <span class="hljs-keyword">if</span> (s.charAt(i-<span class="hljs-number">1</span>) != <span class="hljs-string">&#x27;0&#x27;</span>)<br>                dp[i] = dp[i-<span class="hljs-number">1</span>];<br><br>            <span class="hljs-comment">// 截取两个字符时</span><br>            <span class="hljs-comment">// 除了要小于26以外，使用我这种方法判断的话还要避免第一位是0</span><br>            <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">2</span> &amp;&amp; s.charAt(i-<span class="hljs-number">2</span>) != <span class="hljs-string">&#x27;0&#x27;</span> <br>                &amp;&amp; ((s.charAt(i-<span class="hljs-number">2</span>) - <span class="hljs-string">&#x27;0&#x27;</span>) * <span class="hljs-number">10</span> + (s.charAt(i-<span class="hljs-number">1</span>) - <span class="hljs-string">&#x27;0&#x27;</span>) &lt;= <span class="hljs-number">26</span>))<br>                dp[i] += dp[i-<span class="hljs-number">2</span>];<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> dp[s.length()];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>是不是觉得dp的方式更加优雅简洁呢。</p><p>其实还有更加节省空间的方式，就是把dp数组换成只使用两个变量。因为这里在计算第i个位置的dp时只用到了i-1与i-2两个位置，我这里就不再写下去啦。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实DP和记忆化递归是一样的，只是采用了不同的写法。但是从头直接用动态规划的思想做的话可能会有点困难，所以想不出解法的时候不妨先从最普通的递归开始，一步一步进行优化。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>随机考察知识点 - 即开即用的web服务</title>
    <link href="/2021/04/21/%E9%9A%8F%E6%9C%BA%E8%80%83%E5%AF%9F%E7%9F%A5%E8%AF%86%E7%82%B9-%E5%8D%B3%E5%BC%80%E5%8D%B3%E7%94%A8%E7%9A%84web%E6%9C%8D%E5%8A%A1/"/>
    <url>/2021/04/21/%E9%9A%8F%E6%9C%BA%E8%80%83%E5%AF%9F%E7%9F%A5%E8%AF%86%E7%82%B9-%E5%8D%B3%E5%BC%80%E5%8D%B3%E7%94%A8%E7%9A%84web%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>这是我在考研前突发奇想做的一个用来随机检测自己某个知识点掌握得如何的小工具。当时正好在学django，就用django+vue做了这么一个小玩意，那么就以这篇文章记录一下这个事吧。</p><span id="more"></span><p>github地址：<a href="https://github.com/Congregalis/question_bank">https://github.com/Congregalis/question_bank</a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>为了模拟初高中时，和同学互相提问抽查知识点的场景，我写了这个小工具。它的功能就是充当你的同学，随机的考察你一些问题，帮助你在考试中取得更好成绩！</p><p>我比较追求简洁使用，就参考vue官方的文档简单写了一个页面，Demo大致如下图</p><p><img src="/img/question_bank/question_bank_vue.png"><br><img src="/img/question_bank/answer.png"></p><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><p>本来我考研之前部署在之前买的阿里云服务器上可以直接访问。但是现在过期了没钱续费，想看demo的话可以clone到本地部署运行。</p><p>首先自己创建一个python虚拟环境，然后安装requirement.txt下的包</p><p><code>pip install -r requirement.txt</code></p><p>然后对数据库进行一次初始化</p><p><code>python manage.py makemigrations</code></p><p><code>python manage.py migrate --run-syncdb</code></p><p>然后创建一个用户，否则没有权限新建问题（除了下面通过运行python的方法你也可以操作sqlite数据库新建用户）</p><p><code>python manage.py shell</code> </p><p>打开python命令行，输入以下命令来创建一个admin用户</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User<br>User.objects.create_superuser(username=<span class="hljs-string">&#x27;admin&#x27;</span>, password=<span class="hljs-string">&#x27;123&#x27;</span>, email=<span class="hljs-string">&#x27;no@no,com&#x27;</span>)<br>exit()<br></code></pre></td></tr></table></figure><p>然后开启后台服务</p><p><code>python manage.py runserver</code> </p><p>默认开启在8000端口，当然也可以自己指定端口，此时访问 <a href="localhost:8000">localhost:8000</a> 即可浏览后台管理的api文档（可直接操作），使用刚刚新建的用户登录就可以新建问题了</p><p><img src="/img/question_bank/post_q.png"><br><img src="/img/question_bank/post_res.png"><br><img src="/img/question_bank/categories.png"></p><p>前端页面由vue编写，直接打开项目根目录下的html文件即可浏览（当然，数据库里需要有你新建的问题）</p>]]></content>
    
    
    <categories>
      
      <category>小项目</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/04/19/hello-world/"/>
    <url>/2021/04/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
