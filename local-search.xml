<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java线程的正确使用方式——停止你的new Thread</title>
    <link href="/2021/04/29/Java%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F%E2%80%94%E2%80%94%E5%81%9C%E6%AD%A2%E4%BD%A0%E7%9A%84new-Thread/"/>
    <url>/2021/04/29/Java%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F%E2%80%94%E2%80%94%E5%81%9C%E6%AD%A2%E4%BD%A0%E7%9A%84new-Thread/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近在实验室做相关工作时，一个小伙伴看见项目代码中出现了 <code>new Thread(...)</code> ，破口大骂之。看见这一场景，我默默地删掉了我在另一个地方写的 <code>new Thread(...)</code> 当作无事发生（还好他没看见XD）。</p><p>为了不再犯这种错误，我写下这篇文章来记录一下Java线程究竟该怎么使用（才不会被骂），也是开了一个新坑！</p><span id="more"></span><h2 id="为什么不要用new-Thread"><a href="#为什么不要用new-Thread" class="headerlink" title="为什么不要用new Thread"></a>为什么不要用new Thread</h2><p>首先从我秉持的原则入手，“简洁优雅”。试想如果在一段代码中你需要创建很多线程，那么你就不停地调用 <code>new Thread(...).start()</code> 么？显然这样的代码一点也不简洁，也不优雅。初次之外这样的代码还有很多坏处：</p><ol><li>每次都要新建一个对象，性能差；</li><li>建出来的很多个对象是独立的，缺乏统一的管理。如果在代码中无限新建线程会导致这些线程相互竞争，占用过多的系统资源从而导致死机或者 <strong>oom</strong>；</li><li>缺乏许多功能如定时执行、中断等。</li></ol><p>从这些坏处很容易可以看出解决方法，那就是弄一个监管者来统一的管理这些线程，并将它们存到一个集合（或者类似的数据结构）中，而且还要动态地分配它们的任务。当然Java已经给我们提供好十分健全的东西来使用了，那就是<strong>线程池</strong>！</p><h2 id="Java线程池"><a href="#Java线程池" class="headerlink" title="Java线程池"></a>Java线程池</h2><p>Java提供了一个工厂类来构造我们需要的线程池，这个工厂类就是 <strong><a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executors.html">Executors</a></strong> 。这个类提供了很多方法，我们这里主要讲它提供的4个创建线程池的方法，即</p><ul><li><code>newCachedThreadPool()</code></li><li><code>newFixedThreadPool(int nThreads)</code></li><li><code>newScheduledThreadPool(int corePoolSize)</code></li><li><code>newSingleThreadExecutor()</code></li></ul><h3 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool()"></a>newCachedThreadPool()</h3><p>这个方法正如它的名字一样，创建缓存线程池。缓存的意思就是这个线程池会<strong>根据需要创建新的线程</strong>，在有新任务的时候会优先使用先前创建出的线程。也就是说线程一旦创建了就一直在这个池子里面了，执行完任务后后续还有任务需要会<strong>重用这个线程</strong>，若是<strong>线程不够用了再去新建线程</strong>。</p><p>以一段代码做个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">ExecutorService cachedThreadPool = Executors.newCachedThreadPool(); <span class="hljs-comment">// 创建缓存线程池</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> index = i;<br><br>    <span class="hljs-comment">// 每次发布任务前等待一段时间，如1s</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br><br>    <span class="hljs-comment">// 执行任务</span><br>    cachedThreadPool.execute(() -&gt; System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + index));<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子里，我在每次调用线程执行任务之前都等待1秒，这使时间让线程池内的线程执行完上一个任务绰绰有余，所以你会发现输出里都是<strong>同一个线程</strong>在执行任务。<br><img src="/img/javathread1/cachepool1.png" alt="重用线程例子"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">ExecutorService cachedThreadPool = Executors.newCachedThreadPool(); <span class="hljs-comment">// 创建缓存线程池</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> index = i;<br><br>    <span class="hljs-comment">// 每次发布任务前根据奇偶不同等待一段时间，如1s</span><br>    <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 执行任务</span><br>    cachedThreadPool.execute(() -&gt; System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + index));<br>&#125;<br></code></pre></td></tr></table></figure><p>这个例子中我在每次调用线程执行任务之前根据奇偶不同控制其是否等待，这样就会<strong>在同一时间需要执行2个任务</strong>，所以线程池中按需要多创建了一个线程。你也可以把这个模数改大到3、4、5…来观察线程池是否<strong>按需创建</strong>了新线程。<br><img src="/img/javathread1/cachepool2.png" alt="按需创建新线程例子"></p><p>注意这里的线程池是<strong>无限大的</strong>，我们并没有规定他的大小。（但其实在实际使用时不可能是无限大的，我会在这个系列后面的文章再来探讨这个问题）</p><h3 id="newFixedThreadPool-int-nThreads"><a href="#newFixedThreadPool-int-nThreads" class="headerlink" title="newFixedThreadPool(int nThreads)"></a>newFixedThreadPool(int nThreads)</h3><p>可以看到这个方法中带了一个参数，这个方法创建的线程池是<strong>定长</strong>的，这个参数就是线程池的大小。也就是说，在同一时间执行的线程数量只能是 nThreads 这么多，这个线程池可以有效的控制最大并发数从而防止占用过多资源。超出的线程会放在线程池的一个<strong>队列里等待</strong>其他线程执行完，这个队列也是值得我们去好好研究的，它是一个<strong>无界队列</strong>，我会在这个系列后面的文章探讨它。</p><p>以一段代码做个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">ExecutorService fixedThreadPool = Executors.newFixedThreadPool(<span class="hljs-number">3</span>); <span class="hljs-comment">// 创建缓存线程池，大小为3</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> index = i;<br><br>    <span class="hljs-comment">// 执行任务</span><br>    fixedThreadPool.execute(() -&gt; &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + index);<br><br>        <span class="hljs-comment">// 模拟执行任务耗时1秒</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个例子里可以看到我创建了一个大小为3的线程池，也就是说它支持的最大并发线程数是3，运行后发现这些数确实是3个3个为一组输出的。<br><img src="/img/javathread1/fixedpool1.png" alt="定长线程池例子"></p><p>合理的设置定长线程池的大小是一个很重要的事情。</p><h3 id="newScheduledThreadPool-int-corePoolSize"><a href="#newScheduledThreadPool-int-corePoolSize" class="headerlink" title="newScheduledThreadPool(int corePoolSize)"></a>newScheduledThreadPool(int corePoolSize)</h3><p>从 Scheduled 大概可以猜出这个线程池是为了解决上面说过的第3个坏处，也就是缺乏定时执行功能。这个线程池也是<strong>定长</strong>的，参数 corePoolSize 就是线程池的大小，即在空闲状态下要保留在池中的线程数量。</p><p>而要实现调度需要使用这个线程池的 <code>schedule()</code> 方法 （注意这里要把新建线程池的返回类 ExecutorService 改成 <strong>ScheduledExecutorService</strong> 噢）</p><p>以一段代码做个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 注意！这里把 ExecutorService 改成了 ScheduledExecutorService ，否则没有定时功能</span><br>ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(<span class="hljs-number">3</span>); <span class="hljs-comment">// 创建缓存线程池</span><br><br><span class="hljs-comment">// 执行任务</span><br>scheduledThreadPool.schedule(() -&gt; System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: 我会在3秒后执行。&quot;</span>),<br>        <span class="hljs-number">3</span>, TimeUnit.SECONDS);<br></code></pre></td></tr></table></figure><p>这个例子会在3秒后输出结果。当然你可以根据不同的需求设置不同的定时，甚至还能实现定期执行功能，详细可以查看<a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ScheduledExecutorService.html">官方api</a><br><img src="/img/javathread1/scheduledpool1.png" alt="3秒后执行例子"></p><h3 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor()"></a>newSingleThreadExecutor()</h3><p>这个线程池就比较简单了，他是一个<strong>单线程池</strong>，只使用<strong>一个线程</strong>来执行任务。但是它与 <code>newFixedThreadPool(1, threadFactory)</code> 不同，它会<strong>保证创建的这个线程池不会被重新配置为使用其他的线程</strong>，也就是说这个线程池里的线程始终如一。</p><p>以一段代码做个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor(); <span class="hljs-comment">// 创建单线程池</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> index = i;<br><br>    <span class="hljs-comment">// 执行任务</span><br>    singleThreadExecutor.execute(() -&gt; &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + index);<br><br>        <span class="hljs-comment">// 模拟执行任务耗时1秒</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到输出里他只会一秒一秒地打印内容，只有一个线程在执行任务。<br><img src="/img/javathread1/singlethreadpool1.png" alt="单线程池例子"></p><h3 id="线程池的关闭"><a href="#线程池的关闭" class="headerlink" title="线程池的关闭"></a>线程池的关闭</h3><p>如果你运行了我上面的示例，你会发现程序一直都没有结束，这是因为我上面的示例代码并没有关闭线程池。线程池本身提供了两个关闭的方法：</p><ul><li><code>shutdown()</code> : 将线程池状态置成 <code>SHUTDOWN</code>，此时<strong>不再接受新的任务</strong>，<strong>等待线程池中已有任务执行完成后结束</strong>；</li><li><code>shutdownNow()</code> : 将线程池状态置成 <code>SHUTDOWN</code>，将线程池中<strong>所有线程中断</strong>（调用线程的 <code>interrupt()</code> 操作），清空队列，并返回<strong>正在等待执行的任务列表</strong>。</li></ul><p>并且它还提供了查看线程池是否关闭和是否终止的方法，分别为 <code>isShutdown()</code> 和 <code>isTerminated()</code> 。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>那么根据需要使用以上四种线程池就足够应对平时的需求了，别再使用 <code>new Thread(...)</code> 这种方法啦！</p><p>这个系列还会继续更新下去，主要讲解使用Java线程方面的小知识，当然也会稍微探究一下这其中的原理，欢迎你继续 Follow 下去。</p>]]></content>
    
    
    <categories>
      
      <category>技术小技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>多线程</tag>
      
      <tag>线程池</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java爬虫学习——从维基百科到多个数据源的爬取</title>
    <link href="/2021/04/28/Java%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E4%BB%8EWikipedia%E5%88%B0%E5%A4%9A%E4%B8%AA%E6%95%B0%E6%8D%AE%E6%BA%90%E7%9A%84%E7%88%AC%E5%8F%96/"/>
    <url>/2021/04/28/Java%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E4%BB%8EWikipedia%E5%88%B0%E5%A4%9A%E4%B8%AA%E6%95%B0%E6%8D%AE%E6%BA%90%E7%9A%84%E7%88%AC%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>本次学习的背景基于在实验室所做的工作，目的是构建一门课程信息。我负责的内容是根据给定的课程、课程的大纲等内容来爬取课程某个方面的具体内容。</p><p>万能的维基百科能查到所有东西，所以我以维基百科为基础先拿到某个课程下最基本的信息，然后再根据给定的课程与大纲去其他数据源上获取想要的内容，这就是本次学习的背景啦。</p><span id="more"></span><p>我强烈建议不管干什么，在编码前先要构建好清晰的思路，比如写个 Bullet List，画个流程图等，这样做事情事半功倍。那么我在这里也是以身作则一波，下面是我画的本次爬虫的流程图。<br><img src="/img/crawler4j/overall.jpg" alt="大致爬虫流程"></p><p>除此之外还需要考虑爬虫怎么写，由于项目时间紧，我就不重复造轮子了。浏览了一些开源框架后感觉 crawler4j 这个轻量级 Java 爬虫框架简单易用十分好上手。于是本次的开发就基于这个这个框架来进行。</p><h3 id="本次学习需要的东西"><a href="#本次学习需要的东西" class="headerlink" title="本次学习需要的东西"></a>本次学习需要的东西</h3><ul><li>maven</li><li>crawler4j (<a href="https://github.com/yasserg/crawler4j">仓库地址</a>)</li></ul><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>crawler4j这个爬虫框架主要基于三个类：Controller、Crawler、CrawlStat，简单介绍一下他们各自负责的事情：</p><ul><li>Controller：整个爬虫的控制器，设置一些参数如爬取深度、线程数量等来控制整个爬取过程。</li><li>Crawler：具体的爬虫线程，在里面真正执行爬取并分析爬到的数据。</li><li>CrawlStat：从爬虫线程中收集信息，如在某个页面爬取得的总文本字数、该页面下还有几个可以跳转的链接等。</li></ul><p>基本的爬虫实现在<a href="https://github.com/yasserg/crawler4j">crawler4j仓库</a>里已经说的很简洁明了了，如最最基础的爬取、爬取的一些参数设置、多爬虫爬取等，我这里就不再赘述。</p><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><p>首先来看 Controller 类，其实这个 Controller 类并不是必要的，你也可以写在你需要启动爬虫的地方，主要是设置好 Config ，创建工厂启动就完事了。<br>这里还包含我自身项目的一些逻辑，比如课程、主题、分面等等，你可以不用在意，大致看一下如何实现就行了。</p><p><code>startBasicCrawler()</code> 方法是根据一个<strong>维基百科url</strong>爬取页面信息，比较简单，因为是单页面爬取一个爬虫线程就够用了。<br><code>startCrawlerForAssembleOnly()</code> 方法根据主题与分面名的拼接（你可以将主题理解成维基百科页面的大标题，分面理解成其下的一系列子标题）去 <strong>bing</strong> 上搜索，然后根据<strong>搜索页面</strong>来爬取，这里我使用了<strong>多爬虫任务</strong>，具体可以参照crawler4j仓库上的<a href="https://github.com/yasserg/crawler4j/tree/master/crawler4j-examples/crawler4j-examples-base/src/test/java/edu/uci/ics/crawler4j/examples/multiple">例子</a>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BasicCrawlerController</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger logger =<br>            LoggerFactory.getLogger(BasicCrawlerController.class);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据给定url爬取维基百科页面（这个url是在我的数据库中之前已经得到过的，你可以根据自身的逻辑来得到这个url）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">startBasicCrawler</span><span class="hljs-params">(String url, <span class="hljs-keyword">boolean</span> isChinese, Long domainId, Long topicId)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        CrawlConfig config = <span class="hljs-keyword">new</span> CrawlConfig();<br><br>        config.setCrawlStorageFolder(<span class="hljs-string">&quot;tmp/crawler4j/&quot;</span>);<br>        config.setPolitenessDelay(<span class="hljs-number">1000</span>);<br>        config.setMaxDepthOfCrawling(<span class="hljs-number">0</span>);<br>        config.setMaxPagesToFetch(<span class="hljs-number">1000</span>);<br>        config.setIncludeBinaryContentInCrawling(<span class="hljs-keyword">true</span>);<br>        config.setResumableCrawling(<span class="hljs-keyword">false</span>);<br><br>        PageFetcher pageFetcher = <span class="hljs-keyword">new</span> PageFetcher(config);<br>        RobotstxtConfig robotstxtConfig = <span class="hljs-keyword">new</span> RobotstxtConfig();<br>        RobotstxtServer robotstxtServer = <span class="hljs-keyword">new</span> RobotstxtServer(robotstxtConfig, pageFetcher);<br>        CrawlController controller = <span class="hljs-keyword">new</span> CrawlController(config, pageFetcher, robotstxtServer);<br><br>        controller.addSeed(url);<br><br>        <span class="hljs-keyword">int</span> numberOfCrawlers = <span class="hljs-number">2</span>;<br><br>        CrawlController.WebCrawlerFactory&lt;BasicCrawler&gt; factory =<br>                () -&gt; <span class="hljs-keyword">new</span> BasicCrawler(<span class="hljs-string">&quot;https://zh.wikipedia.org/wiki/&quot;</span>, isChinese, domainId, topicId);<br><br>        controller.start(factory, numberOfCrawlers);<br>        logger.info(<span class="hljs-string">&quot;Crawler is finished&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据给定课程、主题、分面列表，爬取分面列表下每个分面的碎片</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">startCrawlerForAssembleOnly</span><span class="hljs-params">(Long domainId, Long topicId, List&lt;Facet&gt; facets)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-keyword">int</span> numberOfCrawlers = <span class="hljs-number">2</span>;<br>        String crawlStorageFolder = <span class="hljs-string">&quot;/tmp/crawler4j/&quot;</span>;<br>        List&lt;CrawlController&gt; crawlControllers = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        List&lt;CrawlController.WebCrawlerFactory&lt;CSDNCrawler&gt;&gt; crawlerFactories = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; facets.size(); i++) &#123;<br>            CrawlConfig config = <span class="hljs-keyword">new</span> CrawlConfig();<br><br>            config.setCrawlStorageFolder(crawlStorageFolder + <span class="hljs-string">&quot;/facet&quot;</span> + facets.get(i).getFacetName());<br>            config.setPolitenessDelay(<span class="hljs-number">1000</span>);<br>            config.setMaxDepthOfCrawling(<span class="hljs-number">0</span>);<br>            config.setMaxPagesToFetch(<span class="hljs-number">50</span>);<br>            config.setIncludeBinaryContentInCrawling(<span class="hljs-keyword">false</span>);<br>            config.setResumableCrawling(<span class="hljs-keyword">false</span>);<br><br>            <span class="hljs-comment">// Instantiate the controller for this crawl.</span><br>            PageFetcher pageFetcher = <span class="hljs-keyword">new</span> PageFetcher(config);<br>            RobotstxtConfig robotstxtConfig = <span class="hljs-keyword">new</span> RobotstxtConfig();<br>            robotstxtConfig.setEnabled(<span class="hljs-keyword">false</span>);<br>            RobotstxtServer robotstxtServer = <span class="hljs-keyword">new</span> RobotstxtServer(robotstxtConfig, pageFetcher);<br>            CrawlController controller = <span class="hljs-keyword">new</span> CrawlController(config, pageFetcher, robotstxtServer);<br><br>            String topicName = MysqlReadWriteDAO.findTopicNameByTopicId(topicId);<br>            config.setMaxDepthOfCrawling(<span class="hljs-number">1</span>);<br>            config.setMaxPagesToFetch(<span class="hljs-number">50</span>);<br><br>            String facetName = facets.get(i).getFacetName();<br><br>            <span class="hljs-comment">// 根据维基百科上爬取到的标题、副标题等去bing上搜索</span><br>            String targetURL = <span class="hljs-string">&quot;https://cn.bing.com/search?q=&quot;</span> + topicName + facetName;<br>            controller.addSeed(targetURL);<br>            CrawlController.WebCrawlerFactory&lt;CSDNCrawler&gt; csdnFactory =<br>                    () -&gt; <span class="hljs-keyword">new</span> CSDNCrawler(<span class="hljs-string">&quot;https://cn.bing.com/search?q=&quot;</span>, <span class="hljs-keyword">true</span>, domainId, topicId, facetName);<br><br>            crawlControllers.add(controller);<br>            crawlerFactories.add(csdnFactory);<br><br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; facets.size(); i++) &#123;<br>            crawlControllers.get(i).startNonBlocking(crawlerFactories.get(i), numberOfCrawlers);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; facets.size(); i++) &#123;<br>            crawlControllers.get(i).waitUntilFinish();<br>            logger.info(<span class="hljs-string">&quot;Crawler for &quot;</span> + facets.get(i).getFacetName() +  <span class="hljs-string">&quot; is finished.&quot;</span>);<br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Crawler"><a href="#Crawler" class="headerlink" title="Crawler"></a>Crawler</h3><p>然后来说一下核心类，也就是 Crawler。因为维基百科页面和下一步爬搜索页面的逻辑不太一样，所以我写了两个Crawler类。代码可能比较长，不过核心内容都在 <code>run()</code> 方法中，也就是对爬取到的页面进行解析，这也是比较核心的部分。<br>建议主要看我写的第二个Crawler，也是爬取搜索页面的爬虫线程，那个写的逻辑比较清晰。</p><p>爬取维基百科页面的 <strong>Crawler</strong> (写的可能比较乱，所以我把他折叠一下)：</p><details>    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BasicCrawler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebCrawler</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Pattern FILTERS = Pattern.compile(<br>            <span class="hljs-string">&quot;.*(\\.(css|js|bmp|gif|jpe?g|png|tiff?|mid|mp2|mp3|mp4|wav|avi|mov|mpeg|ram|m4v|pdf&quot;</span> +<br>                    <span class="hljs-string">&quot;|rm|smil|wmv|swf|wma|zip|rar|gz))$&quot;</span>);<br>    <span class="hljs-keyword">private</span> String DOMAIN;<br>    <span class="hljs-keyword">private</span> CrawlerStat myCrawlerStat;<br>    <span class="hljs-keyword">private</span> Document document;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> isChinese;<br>    <span class="hljs-keyword">private</span> Long domainId;<br>    <span class="hljs-keyword">private</span> Long topicId;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * Creates a new crawler instance.</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BasicCrawler</span><span class="hljs-params">(String DOMAIN, <span class="hljs-keyword">boolean</span> isChinese, Long domainId, Long topicId)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.DOMAIN = DOMAIN;<br>        <span class="hljs-keyword">this</span>.isChinese = isChinese;<br>        <span class="hljs-keyword">this</span>.domainId = domainId;<br>        <span class="hljs-keyword">this</span>.topicId = topicId;<br>        myCrawlerStat = <span class="hljs-keyword">new</span> CrawlerStat();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">shouldVisit</span><span class="hljs-params">(Page referringPage, WebURL url)</span> </span>&#123;<br>        String href = url.getURL().toLowerCase();<br><br>        <span class="hljs-keyword">return</span> !FILTERS.matcher(href).matches() &amp;&amp; href.startsWith(DOMAIN);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">visit</span><span class="hljs-params">(Page page)</span> </span>&#123;<br>        logger.info(<span class="hljs-string">&quot;===================================================================================&quot;</span>);<br>        logger.info(<span class="hljs-string">&quot;Visited: &#123;&#125;&quot;</span>, page.getWebURL().getURL());<br>        myCrawlerStat.incProcessedPages();<br><br>        List&lt;String&gt; facetNameList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-keyword">if</span> (page.getParseData() <span class="hljs-keyword">instanceof</span> HtmlParseData) &#123;<br>            HtmlParseData htmlParseData = (HtmlParseData) page.getParseData();<br>            String text = htmlParseData.getText();<br>            String html = htmlParseData.getHtml();<br>            Set&lt;WebURL&gt; links = htmlParseData.getOutgoingUrls();<br><br>            document = Jsoup.parse(html);<br>            Elements contents = document.select(<span class="hljs-string">&quot;div[class=mw-parser-output]&quot;</span>);<br>            Element content = contents.get(<span class="hljs-number">0</span>);<br><br>            String facetName = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">for</span> (Object child : content.childNodes()) &#123;<br>                <span class="hljs-keyword">if</span> (child <span class="hljs-keyword">instanceof</span> Element) &#123;<br><br>                    Long facetLevel1; <span class="hljs-comment">// 一级分面id</span><br>                    Long facetLevel2; <span class="hljs-comment">// 二级分面id</span><br><br>                    <span class="hljs-comment">// 获取一级分面名 （即h2标题）</span><br>                    <span class="hljs-keyword">if</span> (((Element) child).tag().getName().equals(<span class="hljs-string">&quot;h2&quot;</span>)) &#123;<br>                        <span class="hljs-comment">// 这里由于中英文页面样式不同，需要分开处理</span><br>                        facetName = isChinese ? ((Element) child).child(<span class="hljs-number">1</span>).text() : ((Element) child).child(<span class="hljs-number">0</span>).text();<br>                    &#125;<br><br>                    <span class="hljs-comment">// 获取二级分面名 （即h3标题）</span><br>                    <span class="hljs-keyword">if</span> (((Element) child).tag().getName().equals(<span class="hljs-string">&quot;h3&quot;</span>)) &#123;<br>                        <span class="hljs-comment">// 可以再根据二级子标题进行一些其他处理...</span><br>                    &#125;<br><br>                    <span class="hljs-comment">// 获取碎片 （即h2标题下的文本）</span><br>                    <span class="hljs-keyword">if</span> (((Element) child).tag().getName().equals(<span class="hljs-string">&quot;p&quot;</span>)) &#123;<br>                        String assembleHtml = ((Element) child).html();<br>                        String assemble = ((Element) child).text();<br><br>                        <span class="hljs-keyword">if</span> (facetName == <span class="hljs-keyword">null</span>) &#123;<br>                            <span class="hljs-comment">// 为每个主题加上一个定义</span><br>                            <span class="hljs-keyword">if</span> ((!isChinese &amp;&amp; assemble.split(<span class="hljs-string">&quot; &quot;</span>).length &gt; <span class="hljs-number">2</span> || isChinese &amp;&amp; assemble.length() &gt; <span class="hljs-number">2</span>) &amp;&amp; !assembleHtml.equals(<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>)) &#123;<br>                                String definition = isChinese ? <span class="hljs-string">&quot;定义&quot;</span> : <span class="hljs-string">&quot;Definition&quot;</span>;<br><br>                                System.out.println(<span class="hljs-string">&quot;获取到分面：&quot;</span> + definition);<br>                                System.out.println(<span class="hljs-string">&quot;获取到碎片：&quot;</span> + assemble);<br>                                System.out.println(<span class="hljs-string">&quot;碎片html格式：&quot;</span> + assembleHtml);<br>                                System.out.println(<span class="hljs-string">&quot;课程ID：&quot;</span> + domainId + <span class="hljs-string">&quot; 主题ID：&quot;</span> + topicId);<br><br>                                <span class="hljs-comment">// 在数据库中存储相应分面及碎片</span><br>                                Long facetId = MysqlReadWriteDAO.findByTopicIdAndFacetName(topicId, definition);<br>                                <span class="hljs-keyword">if</span> (facetId == -<span class="hljs-number">1L</span>) &#123;<br>                                    List&lt;FacetSimple&gt; facetList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>                                    facetList.add(<span class="hljs-keyword">new</span> FacetSimple(definition, <span class="hljs-number">1</span>));<br>                                    <span class="hljs-keyword">try</span> &#123;<br>                                        MysqlReadWriteDAO.storeFacet(topicId, facetList); <span class="hljs-comment">// 存分面</span><br>                                    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                                        e.printStackTrace();<br>                                    &#125;<br>                                    facetId = MysqlReadWriteDAO.findByTopicIdAndFacetName(topicId, definition);<br>                                &#125;<br><br>                                MysqlReadWriteDAO.storeAssemble(assembleHtml, assemble, domainId, facetId, <span class="hljs-number">1L</span>); <span class="hljs-comment">// 存碎片</span><br>                                facetNameList.add(definition);<br>                            &#125;<br>                        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!facetName.equals(<span class="hljs-string">&quot;&quot;</span>) &amp;&amp; !assemble.equals(<span class="hljs-string">&quot;&quot;</span>) &amp;&amp;<br>                                (!isChinese &amp;&amp; assemble.split(<span class="hljs-string">&quot; &quot;</span>).length &gt; <span class="hljs-number">2</span> || isChinese &amp;&amp; assemble.length() &gt; <span class="hljs-number">2</span>) &amp;&amp;<br>                                !assembleHtml.equals(<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>)) &#123;<br>                            System.out.println(<span class="hljs-string">&quot;获取到分面：&quot;</span> + facetName);<br>                            System.out.println(<span class="hljs-string">&quot;获取到碎片：&quot;</span> + assemble);<br>                            System.out.println(<span class="hljs-string">&quot;碎片html格式：&quot;</span> + assembleHtml);<br>                            System.out.println(<span class="hljs-string">&quot;课程ID：&quot;</span> + domainId + <span class="hljs-string">&quot; 主题ID：&quot;</span> + topicId);<br><br>                            <span class="hljs-comment">// 在数据库中存储相应分面及碎片</span><br>                            Long facetId = MysqlReadWriteDAO.findByTopicIdAndFacetName(topicId, facetName);<br>                            <span class="hljs-keyword">if</span> (facetId == -<span class="hljs-number">1L</span>) &#123;<br>                                List&lt;FacetSimple&gt; facetList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>                                facetList.add(<span class="hljs-keyword">new</span> FacetSimple(facetName, <span class="hljs-number">1</span>));<br>                                <span class="hljs-keyword">try</span> &#123;<br>                                    MysqlReadWriteDAO.storeFacet(topicId, facetList); <span class="hljs-comment">// 存分面</span><br>                                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                                    e.printStackTrace();<br>                                &#125;<br>                                facetId = MysqlReadWriteDAO.findByTopicIdAndFacetName(topicId, facetName);<br>                            &#125;<br><br>                            MysqlReadWriteDAO.storeAssemble(assembleHtml, assemble, domainId, facetId, <span class="hljs-number">1L</span>); <span class="hljs-comment">// 存碎片</span><br>                            facetNameList.add(facetName);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            myCrawlerStat.setFacetNameList(facetNameList);<br>            logger.debug(<span class="hljs-string">&quot;Text length: &#123;&#125;&quot;</span>, text.length());<br>            logger.debug(<span class="hljs-string">&quot;Html length: &#123;&#125;&quot;</span>, html.length());<br>            logger.debug(<span class="hljs-string">&quot;Number of outgoing links: &#123;&#125;&quot;</span>, links.size());<br><br>            myCrawlerStat.incTotalLinks(links.size());<br>            <span class="hljs-keyword">try</span> &#123;<br>                myCrawlerStat.incTotalTextSize(text.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>).length);<br>            &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;<br>                System.out.println(<span class="hljs-string">&quot;不支持的编码类型&quot;</span>);<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 每处理一个page转储一下数据</span><br>        <span class="hljs-keyword">if</span> (myCrawlerStat.getTotalProcessedPages() &gt; <span class="hljs-number">0</span>) &#123;<br>            dumpMyData();<br>        &#125;<br><br>        logger.info(<span class="hljs-string">&quot;===================================================================================&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onBeforeExit</span><span class="hljs-params">()</span> </span>&#123;<br>        dumpMyData();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getMyLocalData</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> myCrawlerStat;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dumpMyData</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> id = getMyId();<br>        <span class="hljs-comment">// You can configure the log to output to file</span><br>        logger.info(<span class="hljs-string">&quot;Crawler &#123;&#125; &gt; Processed Pages: &#123;&#125;&quot;</span>, id, myCrawlerStat.getTotalProcessedPages());<br>        logger.info(<span class="hljs-string">&quot;Crawler &#123;&#125; &gt; Total Links Found: &#123;&#125;&quot;</span>, id, myCrawlerStat.getTotalLinks());<br>        logger.info(<span class="hljs-string">&quot;Crawler &#123;&#125; &gt; Total Text Size: &#123;&#125;&quot;</span>, id, myCrawlerStat.getTotalTextSize());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></details><p>爬取搜索页面的 <strong>Crawler</strong>：<br>这里我的逻辑是</p><ol><li>以搜索页面为seed，拿到一系列搜索结果页面；</li><li>根据不同的源（这里可以自己添加想要的数据源，如简书、CSDN等）过滤出想要爬取的页面；</li><li>针对每个源做不同的HTML解析。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.xjtu.spider_new.spiders.csdn;<br><br><span class="hljs-keyword">import</span> com.xjtu.facet.domain.FacetSimple;<br><span class="hljs-keyword">import</span> com.xjtu.spider_new.spiders.CrawlerStat;<br><span class="hljs-keyword">import</span> com.xjtu.spider_new.spiders.wikicn.MysqlReadWriteDAO;<br><span class="hljs-keyword">import</span> edu.uci.ics.crawler4j.crawler.Page;<br><span class="hljs-keyword">import</span> edu.uci.ics.crawler4j.crawler.WebCrawler;<br><span class="hljs-keyword">import</span> edu.uci.ics.crawler4j.parser.HtmlParseData;<br><span class="hljs-keyword">import</span> edu.uci.ics.crawler4j.url.WebURL;<br><span class="hljs-keyword">import</span> org.jsoup.Jsoup;<br><span class="hljs-keyword">import</span> org.jsoup.nodes.Document;<br><span class="hljs-keyword">import</span> org.jsoup.nodes.Element;<br><span class="hljs-keyword">import</span> org.jsoup.select.Elements;<br><br><span class="hljs-keyword">import</span> java.io.UnsupportedEncodingException;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SearchCrawler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebCrawler</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Pattern FILTERS = Pattern.compile(<br>            <span class="hljs-string">&quot;.*(\\.(css|js|bmp|gif|jpe?g|png|tiff?|mid|mp2|mp3|mp4|wav|avi|mov|mpeg|ram|m4v|pdf&quot;</span> +<br>                    <span class="hljs-string">&quot;|rm|smil|wmv|swf|wma|zip|rar|gz))$&quot;</span>);<br>    <span class="hljs-keyword">private</span> String DOMAIN;<br>    <span class="hljs-keyword">private</span> CrawlerStat myCrawlerStat;<br>    <span class="hljs-keyword">private</span> Document document;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> isChinese;<br>    <span class="hljs-keyword">private</span> Long domainId;<br>    <span class="hljs-keyword">private</span> Long topicId;<br>    <span class="hljs-keyword">private</span> String facetName;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SearchCrawler</span><span class="hljs-params">(String DOMAIN, <span class="hljs-keyword">boolean</span> isChinese, Long domainId, Long topicId, String facetName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.DOMAIN = DOMAIN;<br>        <span class="hljs-keyword">this</span>.isChinese = isChinese;<br>        <span class="hljs-keyword">this</span>.domainId = domainId;<br>        <span class="hljs-keyword">this</span>.topicId = topicId;<br>        <span class="hljs-keyword">this</span>.facetName = facetName;<br>        myCrawlerStat = <span class="hljs-keyword">new</span> CrawlerStat();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">shouldVisit</span><span class="hljs-params">(Page referringPage, WebURL url)</span> </span>&#123;<br>        String href = url.getURL().toLowerCase();<br><br>        <span class="hljs-comment">// 过滤出自己想要爬取的域</span><br>        <span class="hljs-keyword">return</span> !FILTERS.matcher(href).matches() &amp;&amp;<br>                (href.startsWith(<span class="hljs-string">&quot;https://blog.csdn.net/&quot;</span>) || href.startsWith(<span class="hljs-string">&quot;https://www.cnblogs.com/&quot;</span>) ||<br>                    href.startsWith(<span class="hljs-string">&quot;https://www.jianshu.com/&quot;</span>) || href.startsWith(<span class="hljs-string">&quot;https://baike.baidu.com/&quot;</span>) ||<br>                        href.equals(DOMAIN.toLowerCase()));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">visit</span><span class="hljs-params">(Page page)</span> </span>&#123;<br>        logger.info(<span class="hljs-string">&quot;===================================================================================&quot;</span>);<br>        logger.info(<span class="hljs-string">&quot;Visited: &#123;&#125;&quot;</span>, page.getWebURL().getURL());<br>        myCrawlerStat.incProcessedPages();<br><br><br>        <span class="hljs-keyword">if</span> (page.getParseData() <span class="hljs-keyword">instanceof</span> HtmlParseData) &#123;<br>            HtmlParseData htmlParseData = (HtmlParseData) page.getParseData();<br>            String text = htmlParseData.getText();<br>            String html = htmlParseData.getHtml();<br>            Set&lt;WebURL&gt; links = htmlParseData.getOutgoingUrls();<br><br>            String domain = page.getWebURL().getDomain(); <span class="hljs-comment">// 查看当前爬的是哪个域</span><br><br>            <span class="hljs-keyword">switch</span> (domain) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;bing.com&quot;</span>:<br>                    logger.info(<span class="hljs-string">&quot;当前域为搜索页面，不进行处理&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;jianshu.com&quot;</span>:<br>                    <span class="hljs-comment">// 解析简书页面</span><br>                    parseJianshu(html);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;csdn.net&quot;</span>:<br>                    <span class="hljs-comment">// 解析CSDN页面</span><br>                    parseCSDN(html);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;cnblogs.com&quot;</span>:<br>                    <span class="hljs-comment">// 解析博客园页面</span><br>                    parseCNBlog(html);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    logger.error(<span class="hljs-string">&quot;未知源&quot;</span>);<br>            &#125;<br><br>            logger.debug(<span class="hljs-string">&quot;Text length: &#123;&#125;&quot;</span>, text.length());<br>            logger.debug(<span class="hljs-string">&quot;Html length: &#123;&#125;&quot;</span>, html.length());<br>            logger.debug(<span class="hljs-string">&quot;Number of outgoing links: &#123;&#125;&quot;</span>, links.size());<br><br>            myCrawlerStat.incTotalLinks(links.size());<br>            <span class="hljs-keyword">try</span> &#123;<br>                myCrawlerStat.incTotalTextSize(text.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>).length);<br>            &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;<br>                System.out.println(<span class="hljs-string">&quot;不支持的编码类型&quot;</span>);<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 每处理一个page转储一下数据</span><br>        <span class="hljs-keyword">if</span> (myCrawlerStat.getTotalProcessedPages() &gt; <span class="hljs-number">0</span>) &#123;<br>            dumpMyData();<br>        &#125;<br><br>        logger.info(<span class="hljs-string">&quot;===================================================================================&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解析简书html</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> html 源数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parseJianshu</span><span class="hljs-params">(String html)</span> </span>&#123;<br>        Document document = Jsoup.parse(html);<br>        Elements article = document.select(<span class="hljs-string">&quot;div[class=show-content-free]&quot;</span>);<br>        String articleHTML = article.html();<br>        String articleContent = article.text();<br>        System.out.println(articleContent);<br>        storeAssemble(articleHTML, articleContent, <span class="hljs-number">17L</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parseCSDN</span><span class="hljs-params">(String html)</span> </span>&#123;<br>        Document document = Jsoup.parse(html);<br>        Elements article = document.select(<span class="hljs-string">&quot;div[id=content_views]&quot;</span>);<br>        String articleHTML = article.html();<br>        String articleContent = article.text();<br>        System.out.println(articleContent);<br>        storeAssemble(articleHTML, articleContent, <span class="hljs-number">4L</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parseCNBlog</span><span class="hljs-params">(String html)</span> </span>&#123;<br>        Document document = Jsoup.parse(html);<br>        Elements article = document.select(<span class="hljs-string">&quot;div[id=cnblogs_post_body]&quot;</span>);<br>        String articleHTML = article.html();<br>        String articleContent = article.text();<br>        System.out.println(articleContent);<br>        storeAssemble(articleHTML, articleContent, <span class="hljs-number">13L</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 存储爬到的碎片</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> articleHTML 碎片 html</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> articleContent 碎片 text</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">storeAssemble</span><span class="hljs-params">(String articleHTML, String articleContent, Long sourceId)</span> </span>&#123;<br>        <span class="hljs-comment">// 在数据库中存储相应分面及碎片</span><br>        Long facetId = MysqlReadWriteDAO.findByTopicIdAndFacetName(topicId, facetName);<br>        <span class="hljs-keyword">if</span> (facetId == -<span class="hljs-number">1L</span>) &#123;<br>            List&lt;FacetSimple&gt; facetList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>            facetList.add(<span class="hljs-keyword">new</span> FacetSimple(facetName, <span class="hljs-number">1</span>));<br>            <span class="hljs-keyword">try</span> &#123;<br>                MysqlReadWriteDAO.storeFacet(topicId, facetList); <span class="hljs-comment">// 存分面</span><br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            facetId = MysqlReadWriteDAO.findByTopicIdAndFacetName(topicId, facetName);<br>        &#125;<br><br>        MysqlReadWriteDAO.storeAssemble(articleHTML, articleContent, domainId, facetId, sourceId); <span class="hljs-comment">// 存碎片</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onBeforeExit</span><span class="hljs-params">()</span> </span>&#123;<br>        dumpMyData();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getMyLocalData</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> myCrawlerStat;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dumpMyData</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> id = getMyId();<br>        <span class="hljs-comment">// You can configure the log to output to file</span><br>        logger.info(<span class="hljs-string">&quot;Crawler &#123;&#125; &gt; Processed Pages: &#123;&#125;&quot;</span>, id, myCrawlerStat.getTotalProcessedPages());<br>        logger.info(<span class="hljs-string">&quot;Crawler &#123;&#125; &gt; Total Links Found: &#123;&#125;&quot;</span>, id, myCrawlerStat.getTotalLinks());<br>        logger.info(<span class="hljs-string">&quot;Crawler &#123;&#125; &gt; Total Text Size: &#123;&#125;&quot;</span>, id, myCrawlerStat.getTotalTextSize());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="CrawlStat"><a href="#CrawlStat" class="headerlink" title="CrawlStat"></a>CrawlStat</h3><p>最后是 CrawlStat 类，这个类可以用来返回<strong>爬取过某个页面后得到的信息</strong>，我也只是在官方示例上加入了爬到的分面（即子标题名）列表信息，以供我链式的调用<strong>爬维基百科+搜索</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xjtu.spider_new.spiders;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CrawlerStat</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> totalProcessedPages;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> totalLinks;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> totalTextSize;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; facetNameList;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getTotalProcessedPages</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> totalProcessedPages;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTotalProcessedPages</span><span class="hljs-params">(<span class="hljs-keyword">int</span> totalProcessedPages)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.totalProcessedPages = totalProcessedPages;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">incProcessedPages</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.totalProcessedPages++;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getTotalLinks</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> totalLinks;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTotalLinks</span><span class="hljs-params">(<span class="hljs-keyword">long</span> totalLinks)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.totalLinks = totalLinks;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getTotalTextSize</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> totalTextSize;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTotalTextSize</span><span class="hljs-params">(<span class="hljs-keyword">long</span> totalTextSize)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.totalTextSize = totalTextSize;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">incTotalLinks</span><span class="hljs-params">(<span class="hljs-keyword">int</span> count)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.totalLinks += count;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">incTotalTextSize</span><span class="hljs-params">(<span class="hljs-keyword">int</span> count)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.totalTextSize += count;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">getFacetNameList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> facetNameList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFacetNameList</span><span class="hljs-params">(List&lt;String&gt; facetNameList)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.facetNameList = facetNameList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>基于crawler4j这个框架来进行Java的爬虫开发还是比较简单的，框架内帮助我们做好了爬虫线程的分配、爬虫的一些设置如robotstxt设置、代理设置等等。在它之上进行开发其实要关注的核心只有2点：<strong>什么页面需要爬</strong>和<strong>页面解析</strong>。需要爬什么页面取决与你的目的，如果像我一开始用流程图规划好了相信并不难弄，而页面解析则需要你会一些前端知识，在需要爬取的页面上先人工去模拟需要些什么数据，然后用 <strong>F12</strong> 来进行定位，最后使用 <strong>Jsoup</strong> 进行解析。</p><p>除此之外crawler4j的源码还是很值得学习的，如果有时间，我会去研究研究并且写一些记录。</p><h2 id="TO-DO"><a href="#TO-DO" class="headerlink" title="TO-DO"></a>TO-DO</h2><p>目前其实还有很多不足的地方，如果有时间了我会一一改进并且把代码重构一下，然后抽离出原本的项目做成一个可以直接使用的东西。</p><ul><li><input disabled="" type="checkbox"> 增加更多的数据源</li><li><input disabled="" type="checkbox"> 实时返回爬取进度</li><li><input disabled="" type="checkbox"> 代码重构</li><li><input disabled="" type="checkbox"> 抽离代码</li></ul>]]></content>
    
    
    <categories>
      
      <category>小项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
      <tag>crawler4j</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单题看中序遍历</title>
    <link href="/2021/04/25/%E7%AE%80%E5%8D%95%E9%A2%98%E7%9C%8B%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <url>/2021/04/25/%E7%AE%80%E5%8D%95%E9%A2%98%E7%9C%8B%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>题目是今天的每日一题<a href="https://leetcode-cn.com/problems/increasing-order-search-tree/">LC897</a><br><img src="/img/20210425inorder/problem.png"></p><h2 id="解"><a href="#解" class="headerlink" title="解"></a>解</h2><p>我总是喜欢从最简单粗暴的方法开始，这个最后的结果看起来不就是个链表吗？那我们就直接把他当列表存储下来然后再一个一个按要求连上。</p><span id="more"></span><h3 id="递归-使用list存储"><a href="#递归-使用list存储" class="headerlink" title="递归 + 使用list存储"></a>递归 + 使用list存储</h3><p>递归的思路比较简单，中序遍历在递归函数中按左结点-本结点-右结点的顺序处理即可。<br>在最后连接的时候我这里写的比较复杂，这是因为在处理列表第一个结点和其余结点的时候情况不同需要分开。针对这个问题可以添加一个哨兵在头部，就可以巧妙处理啦，具体代码可以看我的下一个解法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    List&lt;TreeNode&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">increasingBST</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        inorder(root); <span class="hljs-comment">// 按中序遍历顺序添加到列表里</span><br><br>        <span class="hljs-comment">// 按列表顺序一个个连接上</span><br>        root = list.get(<span class="hljs-number">0</span>);<br>        TreeNode curr = root;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; list.size(); i++) &#123;<br>            curr.left = <span class="hljs-keyword">null</span>;<br>            curr.right = list.get(i);<br>            curr = curr.right;<br>        &#125;<br>        curr.left = <span class="hljs-keyword">null</span>;<br>        curr.right = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inorder</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span>; <br><br>        inorder(root.left);<br>        list.add(root);<br>        inorder(root.right);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="迭代-使用list存储"><a href="#迭代-使用list存储" class="headerlink" title="迭代 + 使用list存储"></a>迭代 + 使用list存储</h3><p>谈到中序遍历往往都会谈到有<strong>递归</strong>与<strong>迭代</strong>两种方式，迭代的方式比较复杂，但也很重要必须要掌握。</p><p>迭代需要一个<strong>栈</strong>来实现，具体思路：</p><ol><li>每到一个结点 node ，将其入栈。（因为中序里先遍历的结点是左结点，所以当前结点不着急访问）</li><li>遍历它的左子树，将该结点变成当前节点，一直直到当前结点为空。</li><li>由于当前结点为空，说明上一个结点没有左子树了，于是拿出栈顶元素进行访问。</li><li>访问完后遍历右子树，遍历步骤同上。</li><li>重复以上步骤直到栈为空（没有上一级结点访问了）</li></ol><p>我这里讲的比较详细，可能看起来比较吃力，具体细节可以看代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    List&lt;TreeNode&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">increasingBST</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-comment">// 迭代做法</span><br>        Deque&lt;TreeNode&gt; deque = <span class="hljs-keyword">new</span> ArrayDeque&lt;&gt;();<br><br>        <span class="hljs-keyword">while</span> (root != <span class="hljs-keyword">null</span> || !deque.isEmpty()) &#123;<br>            <span class="hljs-keyword">while</span> (root != <span class="hljs-keyword">null</span>) &#123;<br>                deque.addLast(root);<br>                root = root.left;<br>            &#125;<br>            root = deque.pollLast();<br>            list.add(root);<br>            root = root.right;<br>        &#125;<br><br>        TreeNode dummy = <span class="hljs-keyword">new</span> TreeNode(-<span class="hljs-number">1</span>);<br>        TreeNode curr = dummy;<br>        <span class="hljs-keyword">for</span> (TreeNode node : list) &#123;<br>            curr.right = node;<br>            node.left = <span class="hljs-keyword">null</span>;<br>            curr = curr.right;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> dummy.right;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="迭代-只记录上一个结点"><a href="#迭代-只记录上一个结点" class="headerlink" title="迭代 + 只记录上一个结点"></a>迭代 + 只记录上一个结点</h3><p>使用list来记录中序遍历的顺序是一个简单且不容易出错的一个方法。<br>但是这样有违我们简洁优雅的原则，其实没有必要去申请这么大的一个空间，用一个遍历来记录中序遍历过程中的上一个结点，并且在中序遍历的过程中直接就可以把结果弄好。具体参考下面代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">increasingBST</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-comment">// 迭代 + 记录上一个结点</span><br>        TreeNode dummy = <span class="hljs-keyword">new</span> TreeNode(-<span class="hljs-number">1</span>);<br>        TreeNode pre = dummy;<br>        Deque&lt;TreeNode&gt; deque = <span class="hljs-keyword">new</span> ArrayDeque&lt;&gt;();<br><br>        <span class="hljs-keyword">while</span> (root != <span class="hljs-keyword">null</span> || !deque.isEmpty()) &#123;<br>            <span class="hljs-keyword">while</span> (root != <span class="hljs-keyword">null</span>) &#123;<br>                deque.addLast(root);<br>                root = root.left;<br>            &#125;<br>            root = deque.pollLast();<br>            pre.right = root;<br>            root.left = <span class="hljs-keyword">null</span>;<br>            pre = pre.right;<br>            root = root.right;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> dummy.right;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="递归-只记录上一个结点"><a href="#递归-只记录上一个结点" class="headerlink" title="递归 + 只记录上一个结点"></a>递归 + 只记录上一个结点</h3><p>留给你们去思考，看懂了上面三个方法相信做出这个解并不困难。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>中序遍历在树的遍历中是一个很常见且很重要的形式。基本上掌握这里的递归+迭代方法就差不多啦，这里把list替换为只记录前一个结点的技巧其实也是很常用的。值得一提的是，在二叉搜索树中中序遍历序列其实就是一个有序数组噢。</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>有什么相关题目值得一做的我会补充在这里。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flutter初识——创建第一个跨平台APP</title>
    <link href="/2021/04/24/Flutter%E5%88%9D%E8%AF%86%E2%80%94%E2%80%94%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%B7%A8%E5%B9%B3%E5%8F%B0APP/"/>
    <url>/2021/04/24/Flutter%E5%88%9D%E8%AF%86%E2%80%94%E2%80%94%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%B7%A8%E5%B9%B3%E5%8F%B0APP/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近声网办了一个编程挑战赛，用他们的 SDK 来开发应用。我也是对此比较感兴趣就想了解了解，同时做个作品。但是我对于前端的东西 js 一类的比较反感哈哈，不太想去学，于是就看看移动端上有没有什么易于开发的东西。之前也是读过《第一行代码》，学过安卓，但是安卓的更新迭代太快了，以前的安卓项目现在都没法运行起来了，故也不太想捣鼓安卓。</p><span id="more"></span><p>这个时候我看到了 Flutter ，对此颇感兴趣，浏览了一下官方文档以及一些 flutter 的社区，感觉生态环境都还不错，所以准备入坑！那么在这里也是记录一下我的一个入坑过程。</p><p>简单介绍一下，Flutter 就是一个<strong>跨平台开发</strong>的框架，可以帮助我们通过一套代码库高效地构建多平台精美应用，包括 Android、IOS、Web、桌面应用等。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>如果要跨平台开发，那么Mac肯定是首选工具，否则你就只能开发安卓应用了。</p><p>如果你要开发安卓应用，那么你需要</p><ul><li>Flutter SDK</li><li>Android SDK</li><li>Android Studio 或者 VSCode</li></ul><p>如果你要开发IOS应用，那么你需要</p><ul><li>Flutter SDK</li><li>Xcode</li></ul><p>这里我的 Flutter SDK 用的是<strong>1.22.6</strong>，因为声网官网上说了目前还不支持 Flutter 2.x。获取特定的SDK版本下载可以看<a href="https://flutter.cn/docs/development/tools/sdk/releases">这里</a></p><p>为了获得比较轻量级的编辑体验，我使用的是 VSCode，安装了<strong>Flutter</strong>和<strong>Dart</strong>两个插件</p><p>将以上环境都安装配置好之后（记得配置环境变量），就可以愉快的开始开发了。</p><blockquote><p>Hint: 测试可以在虚拟机或者自己的手机上进行，有什么问题运行 <code>flutter doctor</code> 都可以找到问题并解决</p></blockquote><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>开发第一个程序，“Hello World”那是必不可少的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"></span>)</span> &#123;<br>  runApp(<br>    Center(<br>      child: Text(<br>        <span class="hljs-string">&#x27;Hello World&#x27;</span>,<br>        textDirection: TextDirection.ltr,<br>      ),<br>    ),<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>非常的简单，主屏幕上就会展示“Hello World”了。</p><p>Flutter 使用的语言是 Dart ，如果你像我一样比较熟悉面向对象语言，那么相信你很容易就能上手。</p><h2 id="第一个App"><a href="#第一个App" class="headerlink" title="第一个App"></a>第一个App</h2><p>这里我用的是官方文档上“编写第一个Flutter应用”的例子，在那里它说的十分清楚，留一个<a href="https://flutter.cn/docs/get-started/codelab">传送门</a>。</p><p>跟着它的教程可以很容易的构建出第一个应用并且熟悉基础的 flutter app 编写，比如如何绘制UI，如何响应按钮按下的动作等等。</p><p><img src="/img/flutter1/firstappv1.png" alt="图来自flutter官方文档"></p><h2 id="加入白天-黑夜模式切换"><a href="#加入白天-黑夜模式切换" class="headerlink" title="加入白天/黑夜模式切换"></a>加入白天/黑夜模式切换</h2><p>为了更好的体验 flutter，在它的例子基础上我加入了切换白天/黑夜浏览模式这个功能。通过右上角的<strong>小灯泡</strong>可以实现模式的切换，并且在进入收藏列表后白天/黑夜主题也会保持一致。</p><center class="half">    <img src = "/img/flutter1/android-day.png" width = "400"/>    <img src = "/img/flutter1/android-night.png" width = "400"/></center><br><p>那么接下来就来看看这是怎么实现的</p><h3 id="加入小灯泡"><a href="#加入小灯泡" class="headerlink" title="加入小灯泡"></a>加入小灯泡</h3><p>这一步非常好做，在官方介绍的教程里也说了如何在 AppBar 上加入一个带图标的按钮，在此基础上再加一个就行啦。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">Scaffold</span>(<br>        <span class="hljs-attribute">appBar</span>: AppBar(<br>          <span class="hljs-attribute">title</span>: Text(<span class="hljs-string">&#x27;名字生成器&#x27;</span>),<br>          <span class="hljs-comment">// backgroundColor: barColor,</span><br>          <span class="hljs-attribute">actions</span>: &lt;Widget&gt;[<br>            new IconButton(<br>                <span class="hljs-attribute">icon</span>: const Icon(Icons.lightbulb_outlined),<br>                <span class="hljs-attribute">onPressed</span>: _switchDarkMode),<br>            new IconButton(<span class="hljs-attribute">icon</span>: const Icon(Icons.list), <span class="hljs-attribute">onPressed</span>: _pushSaved),<br>          ],<br>        ),<br>        <span class="hljs-attribute">body</span>: _buildSuggestions(),<br>      );<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h3><p>加这个功能的想法其实就是从官方教程上说到主题那里来的。我在反复的测试都有些什么主题的时候发现了有<code>ThemeData.dark()</code>和<code>ThemeData.light()</code>两个有意思的东西，我就在想何不做一个主题切换呢？但是在真正做的时候其实还是困扰了我很久的，毕竟我比较菜。</p><p>于是我就上网查了一下，发现通过调用<strong>setState</strong>并重写里面的方法可以做到改变界面的一些状态。但是你会发现，<strong>theme</strong>是在<strong>MaterialApp</strong>下的，而如果你是按官方教程做的，它在重写 build 方法时只构建了 Scaffold ，而把 MaterialApp 的构建写在了 Myapp 里。这就导致如果你想通过 Scaffold 里的按钮改变主题，那必须得修改上层 MaterialApp 的 theme ，而他们又不在一个类中，不属于一个 Widget，<strong>这个时候调用 setState 无法改变到 theme</strong>。</p><p>我也是上网查到有很多种方案，但大都比较复杂，有的甚至需要导入一些外部包。本着简洁高效的我当然不接受这样做了，于是我想出了另一个方案，不知道适不适合，在这里供大家一看。</p><p>首先，既然 theme 只能在 MaterialApp 里指定，那我就在重写 build 方法的时候在外面再套一层 MaterialApp 不就可以了嘛。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// 在类里定义好themeData与当前模式两个变量</span><br>ThemeData themeData = <span class="hljs-keyword">new</span> ThemeData.dark();<br><span class="hljs-built_in">bool</span> isDark = <span class="hljs-keyword">true</span>;<br><br><span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> MaterialApp( <span class="hljs-comment">// 再加一层MaterialApp，在里面指定theme</span><br>      title: <span class="hljs-string">&#x27;名字生成器&#x27;</span>,<br>      theme: themeData,<br>      home: Scaffold(<br>        appBar: AppBar(<br>          title: Text(<span class="hljs-string">&#x27;名字生成器&#x27;</span>),<br>          <span class="hljs-comment">// backgroundColor: barColor,</span><br>          actions: &lt;Widget&gt;[<br>            <span class="hljs-keyword">new</span> IconButton(<br>                icon: <span class="hljs-keyword">const</span> Icon(Icons.lightbulb_outlined),<br>                onPressed: _switchDarkMode),<br>            <span class="hljs-keyword">new</span> IconButton(icon: <span class="hljs-keyword">const</span> Icon(Icons.list), onPressed: _pushSaved),<br>          ],<br>        ),<br>        body: _buildSuggestions(),<br>      ),<br>    );<br>  &#125;<br></code></pre></td></tr></table></figure><p>然后写这个<code>_switchDarkMode</code>就很轻松简单了。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> _switchDarkMode() &#123;<br>    setState(() &#123;<br>      <span class="hljs-keyword">if</span> (isDark) &#123;<br>        themeData = <span class="hljs-keyword">new</span> ThemeData.light();<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        themeData = <span class="hljs-keyword">new</span> ThemeData.dark();<br>      &#125;<br>      isDark = !isDark;<br>    &#125;);<br>  &#125;<br></code></pre></td></tr></table></figure><p>改完之后你会发现切换白天/黑夜模式可以了，非常开心。但是当你点进收藏列表，它又报错了。</p><h3 id="修改官方版本的路由代码"><a href="#修改官方版本的路由代码" class="headerlink" title="修改官方版本的路由代码"></a>修改官方版本的路由代码</h3><p>官方的路由这样的</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> _pushSaved() &#123;<br>  Navigator.of(context).push(<br>    <span class="hljs-keyword">new</span> MaterialPageRoute&lt;<span class="hljs-keyword">void</span>&gt;(<br>      ...                           <br>    )<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>报错也是提示出错是出在这里，那么这里为什么出错呢？这可能就需要去了解一些关于这里的 <strong>of(context)</strong> 的知识了。</p><p>我也是才入门了一天，没有去仔细的了解。查阅了网上资料通俗解释一下就是，当我们在 build 函数中使用 Navigator.of(context) 时，这个 context 其实是通过当前这个widget（在官方示例中就是 RandomWords 这个类）创建出来的 <strong>Element</strong> 对象，然后 of 方法会向上去寻找<strong>祖先结点</strong>。在官方实例中这么写是能找到祖先节点的，那就是在 MyApp 中创建的 MaterialApp ，所以官方示例中不会报错。</p><p>而在我们修改的版本里，在 RandomWords 的 build 函数中我又嵌套了一层 MaterialApp（为了实现主题切换功能），这时候在里面用 of 方法去寻找祖先节点可能寻找到这里就停止了，不再往上寻找了，于是就找不到上一层的路由了，所以在这里报了错。（这一段的原因我自己也没弄太明白，欢迎知道的大神指正我orz）</p><p>要修改其实很简单，当前就有一层 MaterialApp 了，因此没必要往上追溯，<strong>直接使用当前的 Navigator</strong> 即可。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> _pushSaved() &#123;<br>    Navigator.push(context,<br>        <span class="hljs-keyword">new</span> MaterialPageRoute(builder: (BuildContext context) &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-built_in">Iterable</span>&lt;ListTile&gt; tiles = _saved.map((WordPair pair) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ListTile(<br>          title: <span class="hljs-keyword">new</span> Text(<br>            pair.asPascalCase,<br>            style: _biggerFont,<br>          ),<br>        );<br>      &#125;);<br><br>      <span class="hljs-keyword">final</span> <span class="hljs-built_in">List</span>&lt;Widget&gt; divided = ListTile.divideTiles(<br>        context: context,<br>        tiles: tiles,<br>      ).toList();<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Scaffold(<br>          appBar: <span class="hljs-keyword">new</span> AppBar(<br>            leading: <span class="hljs-keyword">new</span> IconButton(<br>                icon: <span class="hljs-keyword">const</span> Icon(Icons.chevron_left),<br>                onPressed: () &#123;<br>                  Navigator.pop(context);<br>                &#125;),<br>            title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;我的收藏&#x27;</span>),<br>          ),<br>          body: <span class="hljs-keyword">new</span> ListView(children: divided),<br>      );<br>    &#125;));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="统一主题"><a href="#统一主题" class="headerlink" title="统一主题"></a>统一主题</h3><p>还有一点需要注意的就是官方示例中跳转到新页面时是直接返回的一个 Scaffold ，这样 Navigator 会自动创建一个“返回按钮”，但是我们想统一主题的话还是像我一开始所说的需要<strong>创建一个 MaterialApp</strong> ，所以这也需要自己手动添加“返回”按钮及功能了。</p><p>在上面 _pushSaved 方法中的 return 进行修改即可。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MaterialApp(<br>    theme: themeData,<br>    home: <span class="hljs-keyword">new</span> Scaffold(<br>        appBar: <span class="hljs-keyword">new</span> AppBar(<br>        leading: <span class="hljs-keyword">new</span> IconButton(<br>            icon: <span class="hljs-keyword">const</span> Icon(Icons.chevron_left),<br>            onPressed: () &#123;<br>                Navigator.pop(context);<br>            &#125;),<br>        title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;我的收藏&#x27;</span>),<br>        ),<br>        body: <span class="hljs-keyword">new</span> ListView(children: divided),<br>    ),<br>);<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说，Flutter 还是一个很好用的框架的，至少对我来说是如此。虽然 Dart 的嵌套一直被人诟病，但是 Dart 对于后端人员比较容易上手也算是他的一个优势吧，我个人认为他在快速开发一个应用上表现非常好。当然，这个系列后面的内容我肯定也是会围绕着那个声网的 SDK 去做的，毕竟这才是我的初衷哈哈。</p><p>最后再提供几个十分实用的资源:</p><ul><li><a href="https://api.flutter.dev/index.html">官方API</a></li><li><a href="https://flutter.cn/docs/cookbook">CookBook</a></li><li><a href="https://codelabs.flutter-io.cn/">CodeLabs</a></li><li><a href="https://gallery.flutter.dev/#/">Gallery</a></li><li><a href="https://fonts.google.com/icons?selected=Material+Icons">查看flutter提供的icons</a></li><li><a href="https://github.com/fengerwoo/easy_anim">更好的使用flutter动画的方式</a></li><li><a href="https://github.com/Solido/awesome-flutter">Awesome-Flutter</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>移动开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从递归到记忆化递归再到dp</title>
    <link href="/2021/04/21/%E4%BB%8E%E9%80%92%E5%BD%92%E5%88%B0%E8%AE%B0%E5%BF%86%E5%8C%96%E9%80%92%E5%BD%92%E5%86%8D%E5%88%B0dp/"/>
    <url>/2021/04/21/%E4%BB%8E%E9%80%92%E5%BD%92%E5%88%B0%E8%AE%B0%E5%BF%86%E5%8C%96%E9%80%92%E5%BD%92%E5%86%8D%E5%88%B0dp/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>今天做了一道题，觉得这个思想还挺有价值的，故写下这篇文记录一下。</p><p>题目是<a href="https://leetcode-cn.com/problems/decode-ways/">LC91</a>，是一道很基础的题。</p><p><img src="/img/20210421dp/question.jpg"></p><h2 id="解"><a href="#解" class="headerlink" title="解"></a>解</h2><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>看到这个题，一下能想到的方法就是递归搜索了。<br>因为这个题解码时只有两种情况，在某个状态截取1个字符或截取两个字符，所以递归做起来也不会很复杂。</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">numDecodings</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-comment">// 递归解法（超时）</span><br>        <span class="hljs-keyword">return</span> dfs(s.toCharArray(), s.length(), <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] chars, <span class="hljs-keyword">int</span> len, <span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        <span class="hljs-comment">// 找到了一条解码方式</span><br>        <span class="hljs-keyword">if</span> (index &gt;= len) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <br>        <span class="hljs-comment">// &#x27;0&#x27;没有解码方式（10或20可以在下面截取2个字符时截取得到，所以不用担心这样漏解）</span><br>        <span class="hljs-keyword">if</span> (chars[index] == <span class="hljs-string">&#x27;0&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// 截取1个字符时</span><br>        <span class="hljs-keyword">int</span> res = dfs(chars, len, index + <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 截取2个字符时</span><br>        <span class="hljs-keyword">if</span> (index &lt; len - <span class="hljs-number">1</span> &amp;&amp; ((chars[index] - <span class="hljs-string">&#x27;0&#x27;</span>) * <span class="hljs-number">10</span> + (chars[index+<span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>) &lt;= <span class="hljs-number">26</span>))<br>            res += dfs(chars, len, index + <span class="hljs-number">2</span>);<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然，这个方法毫无疑问会超时，但是这无疑是我们往后优化所必不可少的第一步。</p><h3 id="记忆化递归"><a href="#记忆化递归" class="headerlink" title="记忆化递归"></a>记忆化递归</h3><p>抓耳挠腮了半天，甚至动笔模拟了很久，会发现这个递归的方法存在很多不必要的重复计算。<br>在计算一个字符串编码方式时，这个普通的递归方法会多次重复计算它的子编码方式（即它的子字符串的编码方式）</p><p>如果不懂的话，看一下代码比较容易理解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">numDecodings</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-comment">// 记忆化递归</span><br><br>        <span class="hljs-comment">// 使用一个数组来存储计算结果就行了</span><br>        <span class="hljs-comment">// 只需要存储s中从index开始到最后有多少种解码方式就行了</span><br>        <span class="hljs-keyword">int</span>[] record = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[s.length()];<br>        Arrays.fill(record, -<span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">return</span> dfs(s.toCharArray(), s.length(), <span class="hljs-number">0</span>, record);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] chars, <span class="hljs-keyword">int</span> len, <span class="hljs-keyword">int</span> index, <span class="hljs-keyword">int</span>[] record)</span> </span>&#123;<br>        <span class="hljs-comment">// 找到了一条解码方式</span><br>        <span class="hljs-keyword">if</span> (index &gt;= len) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <br>        <span class="hljs-comment">// &#x27;0&#x27;没有解码方式（10或20可以在下面截取2个字符时截取得到，所以不用担心这样漏解）</span><br>        <span class="hljs-keyword">if</span> (chars[index] == <span class="hljs-string">&#x27;0&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 如果已经计算过了，直接返回计算结果</span><br>        <span class="hljs-keyword">if</span> (record[index] != -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> record[index];<br><br>        <span class="hljs-comment">// 截取1个字符时</span><br>        <span class="hljs-keyword">int</span> res = dfs(chars, len, index + <span class="hljs-number">1</span>, record);<br>        <span class="hljs-comment">// 截取2个字符时</span><br>        <span class="hljs-keyword">if</span> (index &lt; len - <span class="hljs-number">1</span> &amp;&amp; ((chars[index] - <span class="hljs-string">&#x27;0&#x27;</span>) * <span class="hljs-number">10</span> + (chars[index+<span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>) &lt;= <span class="hljs-number">26</span>))<br>            res += dfs(chars, len, index + <span class="hljs-number">2</span>, record);<br>        <br>        record[index] = res; <span class="hljs-comment">// 记录下index下有多少种解码方式</span><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>到这里，其实已经优化的很好了，但是还可以使用动态规划解决。</p><h3 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h3><p>DP的方法其实就是把记忆化递归的方式写成迭代的方式。<br>在记忆化递归中，记录数组record是在s中从后往前记录的，当然DP也可以从后往前写，但是从前往后比较符合我们人类的思维，所以我这里从前往后使用迭代的方式来做。</p><p>如果是一步步做下来的，其实可以很轻松地发现状态转移方程。<br><code>dp[i] = dp[i-1] + dp[i-2]</code><br>只是在处理边界条件和判断进入哪种状态时需要稍微注意一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">numDecodings</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-comment">// dp解法</span><br>        <span class="hljs-comment">// 比s长度大1，是为了添加一个哨兵</span><br>        <span class="hljs-keyword">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[s.length() + <span class="hljs-number">1</span>];<br><br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>; <span class="hljs-comment">// 哨兵，防止第一个字符就是&#x27;0&#x27;</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= s.length(); i++) &#123;<br>            <span class="hljs-comment">// 截取一个字符时</span><br>            <span class="hljs-comment">// 只要不是&#x27;0&#x27;都可以接受</span><br>            <span class="hljs-keyword">if</span> (s.charAt(i-<span class="hljs-number">1</span>) != <span class="hljs-string">&#x27;0&#x27;</span>)<br>                dp[i] = dp[i-<span class="hljs-number">1</span>];<br><br>            <span class="hljs-comment">// 截取两个字符时</span><br>            <span class="hljs-comment">// 除了要小于26以外，使用我这种方法判断的话还要避免第一位是0</span><br>            <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">2</span> &amp;&amp; s.charAt(i-<span class="hljs-number">2</span>) != <span class="hljs-string">&#x27;0&#x27;</span> <br>                &amp;&amp; ((s.charAt(i-<span class="hljs-number">2</span>) - <span class="hljs-string">&#x27;0&#x27;</span>) * <span class="hljs-number">10</span> + (s.charAt(i-<span class="hljs-number">1</span>) - <span class="hljs-string">&#x27;0&#x27;</span>) &lt;= <span class="hljs-number">26</span>))<br>                dp[i] += dp[i-<span class="hljs-number">2</span>];<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> dp[s.length()];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>是不是觉得dp的方式更加优雅简洁呢。</p><p>其实还有更加节省空间的方式，就是把dp数组换成只使用两个变量。因为这里在计算第i个位置的dp时只用到了i-1与i-2两个位置，我这里就不再写下去啦。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实DP和记忆化递归是一样的，只是采用了不同的写法。但是从头直接用动态规划的思想做的话可能会有点困难，所以想不出解法的时候不妨先从最普通的递归开始，一步一步进行优化。</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>有什么相关题目值得一做的我会补充在这里。</p><ul><li><a href="https://leetcode-cn.com/problems/combination-sum-iv/">LC337.组合总和 Ⅳ</a></li><li><a href="https://leetcode-cn.com/problems/frog-jump/">LC403.青蛙过河</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随机考察知识点 - 即开即用的web服务</title>
    <link href="/2021/04/21/%E9%9A%8F%E6%9C%BA%E8%80%83%E5%AF%9F%E7%9F%A5%E8%AF%86%E7%82%B9-%E5%8D%B3%E5%BC%80%E5%8D%B3%E7%94%A8%E7%9A%84web%E6%9C%8D%E5%8A%A1/"/>
    <url>/2021/04/21/%E9%9A%8F%E6%9C%BA%E8%80%83%E5%AF%9F%E7%9F%A5%E8%AF%86%E7%82%B9-%E5%8D%B3%E5%BC%80%E5%8D%B3%E7%94%A8%E7%9A%84web%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>这是我在考研前突发奇想做的一个用来随机检测自己某个知识点掌握得如何的小工具。当时正好在学django，就用django+vue做了这么一个小玩意，那么就以这篇文章记录一下这个事吧。</p><span id="more"></span><p>github地址：<a href="https://github.com/Congregalis/question_bank">https://github.com/Congregalis/question_bank</a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>为了模拟初高中时，和同学互相提问抽查知识点的场景，我写了这个小工具。它的功能就是充当你的同学，随机的考察你一些问题，帮助你在考试中取得更好成绩！</p><p>我比较追求简洁使用，就参考vue官方的文档简单写了一个页面，Demo大致如下图</p><p><img src="/img/question_bank/question_bank_vue.png"><br><img src="/img/question_bank/answer.png"></p><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><p>本来我考研之前部署在之前买的阿里云服务器上可以直接访问。但是现在过期了没钱续费，想看demo的话可以clone到本地部署运行。</p><p>首先自己创建一个python虚拟环境，然后安装requirement.txt下的包</p><p><code>pip install -r requirement.txt</code></p><p>然后对数据库进行一次初始化</p><p><code>python manage.py makemigrations</code></p><p><code>python manage.py migrate --run-syncdb</code></p><p>然后创建一个用户，否则没有权限新建问题（除了下面通过运行python的方法你也可以操作sqlite数据库新建用户）</p><p><code>python manage.py shell</code> </p><p>打开python命令行，输入以下命令来创建一个admin用户</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User<br>User.objects.create_superuser(username=<span class="hljs-string">&#x27;admin&#x27;</span>, password=<span class="hljs-string">&#x27;123&#x27;</span>, email=<span class="hljs-string">&#x27;no@no,com&#x27;</span>)<br>exit()<br></code></pre></td></tr></table></figure><p>然后开启后台服务</p><p><code>python manage.py runserver</code> </p><p>默认开启在8000端口，当然也可以自己指定端口，此时访问 <a href="localhost:8000">localhost:8000</a> 即可浏览后台管理的api文档（可直接操作），使用刚刚新建的用户登录就可以新建问题了</p><p><img src="/img/question_bank/post_q.png"><br><img src="/img/question_bank/post_res.png"><br><img src="/img/question_bank/categories.png"></p><p>前端页面由vue编写，直接打开项目根目录下的html文件即可浏览（当然，数据库里需要有你新建的问题）</p>]]></content>
    
    
    <categories>
      
      <category>小项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/04/19/hello-world/"/>
    <url>/2021/04/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
