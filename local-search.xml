<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>从递归到记忆化递归再到dp</title>
    <link href="/2021/04/21/%E4%BB%8E%E9%80%92%E5%BD%92%E5%88%B0%E8%AE%B0%E5%BF%86%E5%8C%96%E9%80%92%E5%BD%92%E5%86%8D%E5%88%B0dp/"/>
    <url>/2021/04/21/%E4%BB%8E%E9%80%92%E5%BD%92%E5%88%B0%E8%AE%B0%E5%BF%86%E5%8C%96%E9%80%92%E5%BD%92%E5%86%8D%E5%88%B0dp/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>今天做了一道题，觉得这个思想还挺有价值的，故写下这篇文记录一下。</p><p>题目是<a href="https://leetcode-cn.com/problems/decode-ways/">LC91</a>，是一道很基础的题。</p><p><img src="/img/20210421dp/question.jpg"></p><h2 id="解"><a href="#解" class="headerlink" title="解"></a>解</h2><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>看到这个题，一下能想到的方法就是递归搜索了。<br>因为这个题解码时只有两种情况，在某个状态截取1个字符或截取两个字符，所以递归做起来也不会很复杂。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">numDecodings</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-comment">// 递归解法（超时）</span><br>        <span class="hljs-keyword">return</span> dfs(s.toCharArray(), s.length(), <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] chars, <span class="hljs-keyword">int</span> len, <span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        <span class="hljs-comment">// 找到了一条解码方式</span><br>        <span class="hljs-keyword">if</span> (index &gt;= len) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <br>        <span class="hljs-comment">// &#x27;0&#x27;没有解码方式（10或20可以在下面截取2个字符时截取得到，所以不用担心这样漏解）</span><br>        <span class="hljs-keyword">if</span> (chars[index] == <span class="hljs-string">&#x27;0&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// 截取1个字符时</span><br>        <span class="hljs-keyword">int</span> res = dfs(chars, len, index + <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 截取2个字符时</span><br>        <span class="hljs-keyword">if</span> (index &lt; len - <span class="hljs-number">1</span> &amp;&amp; ((chars[index] - <span class="hljs-string">&#x27;0&#x27;</span>) * <span class="hljs-number">10</span> + (chars[index+<span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>) &lt;= <span class="hljs-number">26</span>))<br>            res += dfs(chars, len, index + <span class="hljs-number">2</span>);<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然，这个方法毫无疑问会超时，但是这无疑是我们往后优化所必不可少的第一步。</p><h3 id="记忆化递归"><a href="#记忆化递归" class="headerlink" title="记忆化递归"></a>记忆化递归</h3><p>抓耳挠腮了半天，甚至动笔模拟了很久，会发现这个递归的方法存在很多不必要的重复计算。<br>在计算一个字符串编码方式时，这个普通的递归方法会多次重复计算它的子编码方式（即它的子字符串的编码方式）</p><p>如果不懂的话，看一下代码比较容易理解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">numDecodings</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-comment">// 记忆化递归</span><br><br>        <span class="hljs-comment">// 使用一个数组来存储计算结果就行了</span><br>        <span class="hljs-comment">// 只需要存储s中从index开始到最后有多少种解码方式就行了</span><br>        <span class="hljs-keyword">int</span>[] record = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[s.length()];<br>        Arrays.fill(record, -<span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">return</span> dfs(s.toCharArray(), s.length(), <span class="hljs-number">0</span>, record);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] chars, <span class="hljs-keyword">int</span> len, <span class="hljs-keyword">int</span> index, <span class="hljs-keyword">int</span>[] record)</span> </span>&#123;<br>        <span class="hljs-comment">// 找到了一条解码方式</span><br>        <span class="hljs-keyword">if</span> (index &gt;= len) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <br>        <span class="hljs-comment">// &#x27;0&#x27;没有解码方式（10或20可以在下面截取2个字符时截取得到，所以不用担心这样漏解）</span><br>        <span class="hljs-keyword">if</span> (chars[index] == <span class="hljs-string">&#x27;0&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 如果已经计算过了，直接返回计算结果</span><br>        <span class="hljs-keyword">if</span> (record[index] != -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> record[index];<br><br>        <span class="hljs-comment">// 截取1个字符时</span><br>        <span class="hljs-keyword">int</span> res = dfs(chars, len, index + <span class="hljs-number">1</span>, record);<br>        <span class="hljs-comment">// 截取2个字符时</span><br>        <span class="hljs-keyword">if</span> (index &lt; len - <span class="hljs-number">1</span> &amp;&amp; ((chars[index] - <span class="hljs-string">&#x27;0&#x27;</span>) * <span class="hljs-number">10</span> + (chars[index+<span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>) &lt;= <span class="hljs-number">26</span>))<br>            res += dfs(chars, len, index + <span class="hljs-number">2</span>, record);<br>        <br>        record[index] = res; <span class="hljs-comment">// 记录下index下有多少种解码方式</span><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>到这里，其实已经优化的很好了，但是还可以使用动态规划解决。</p><h3 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h3><p>DP的方法其实就是把记忆化递归的方式写成迭代的方式。<br>在记忆化递归中，记录数组record是在s中从后往前记录的，当然DP也可以从后往前写，但是从前往后比较符合我们人类的思维，所以我这里从前往后使用迭代的方式来做。</p><p>如果是一步步做下来的，其实可以很轻松地发现状态转移方程。<br><code>dp[i] = dp[i-1] + dp[i-2]</code><br>只是在处理边界条件和判断进入哪种状态时需要稍微注意一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">numDecodings</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-comment">// dp解法</span><br>        <span class="hljs-comment">// 比s长度大1，是为了添加一个哨兵</span><br>        <span class="hljs-keyword">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[s.length() + <span class="hljs-number">1</span>];<br><br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>; <span class="hljs-comment">// 哨兵，防止第一个字符就是&#x27;0&#x27;</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= s.length(); i++) &#123;<br>            <span class="hljs-comment">// 截取一个字符时</span><br>            <span class="hljs-comment">// 只要不是&#x27;0&#x27;都可以接受</span><br>            <span class="hljs-keyword">if</span> (s.charAt(i-<span class="hljs-number">1</span>) != <span class="hljs-string">&#x27;0&#x27;</span>)<br>                dp[i] = dp[i-<span class="hljs-number">1</span>];<br><br>            <span class="hljs-comment">// 截取两个字符时</span><br>            <span class="hljs-comment">// 除了要小于26以外，使用我这种方法判断的话还要避免第一位是0</span><br>            <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">2</span> &amp;&amp; s.charAt(i-<span class="hljs-number">2</span>) != <span class="hljs-string">&#x27;0&#x27;</span> <br>                &amp;&amp; ((s.charAt(i-<span class="hljs-number">2</span>) - <span class="hljs-string">&#x27;0&#x27;</span>) * <span class="hljs-number">10</span> + (s.charAt(i-<span class="hljs-number">1</span>) - <span class="hljs-string">&#x27;0&#x27;</span>) &lt;= <span class="hljs-number">26</span>))<br>                dp[i] += dp[i-<span class="hljs-number">2</span>];<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> dp[s.length()];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>是不是觉得dp的方式更加优雅简洁呢。</p><p>其实还有更加节省空间的方式，就是把dp数组换成只使用两个变量。因为这里在计算第i个位置的dp时只用到了i-1与i-2两个位置，我这里就不再写下去啦。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实DP和记忆化递归是一样的，只是采用了不同的写法。但是从头直接用动态规划的思想做的话可能会有点困难，所以想不出解法的时候不妨先从最普通的递归开始，一步一步进行优化。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>随机考察知识点 - 即开即用的web服务</title>
    <link href="/2021/04/21/%E9%9A%8F%E6%9C%BA%E8%80%83%E5%AF%9F%E7%9F%A5%E8%AF%86%E7%82%B9-%E5%8D%B3%E5%BC%80%E5%8D%B3%E7%94%A8%E7%9A%84web%E6%9C%8D%E5%8A%A1/"/>
    <url>/2021/04/21/%E9%9A%8F%E6%9C%BA%E8%80%83%E5%AF%9F%E7%9F%A5%E8%AF%86%E7%82%B9-%E5%8D%B3%E5%BC%80%E5%8D%B3%E7%94%A8%E7%9A%84web%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>这是我在考研前突发奇想做的一个用来随机检测自己某个知识点掌握得如何的小工具。当时正好在学django，就用django+vue做了这么一个小玩意，那么就以这篇文章记录一下这个事吧。</p><span id="more"></span><p>github地址：<a href="https://github.com/Congregalis/question_bank">https://github.com/Congregalis/question_bank</a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>为了模拟初高中时，和同学互相提问抽查知识点的场景，我写了这个小工具。它的功能就是充当你的同学，随机的考察你一些问题，帮助你在考试中取得更好成绩！</p><p>我比较追求简洁使用，就参考vue官方的文档简单写了一个页面，Demo大致如下图</p><p><img src="/img/question_bank/question_bank_vue.png"><br><img src="/img/question_bank/answer.png"></p><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><p>本来我考研之前部署在之前买的阿里云服务器上可以直接访问。但是现在过期了没钱续费，想看demo的话可以clone到本地部署运行。</p><p>首先自己创建一个python虚拟环境，然后安装requirement.txt下的包</p><p><code>pip install -r requirement.txt</code></p><p>然后对数据库进行一次初始化</p><p><code>python manage.py makemigrations</code></p><p><code>python manage.py migrate --run-syncdb</code></p><p>然后创建一个用户，否则没有权限新建问题（除了下面通过运行python的方法你也可以操作sqlite数据库新建用户）</p><p><code>python manage.py shell</code> </p><p>打开python命令行，输入以下命令来创建一个admin用户</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User<br>User.objects.create_superuser(username=<span class="hljs-string">&#x27;admin&#x27;</span>, password=<span class="hljs-string">&#x27;123&#x27;</span>, email=<span class="hljs-string">&#x27;no@no,com&#x27;</span>)<br>exit()<br></code></pre></td></tr></table></figure><p>然后开启后台服务</p><p><code>python manage.py runserver</code> </p><p>默认开启在8000端口，当然也可以自己指定端口，此时访问 <a href="localhost:8000">localhost:8000</a> 即可浏览后台管理的api文档（可直接操作），使用刚刚新建的用户登录就可以新建问题了</p><p><img src="/img/question_bank/post_q.png"><br><img src="/img/question_bank/post_res.png"><br><img src="/img/question_bank/categories.png"></p><p>前端页面由vue编写，直接打开项目根目录下的html文件即可浏览（当然，数据库里需要有你新建的问题）</p>]]></content>
    
    
    <categories>
      
      <category>小项目</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/04/19/hello-world/"/>
    <url>/2021/04/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
